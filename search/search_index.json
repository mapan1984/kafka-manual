{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kafka \u4f7f\u7528\u624b\u518c","title":"kafka \u4f7f\u7528\u624b\u518c"},{"location":"#kafka","text":"","title":"kafka \u4f7f\u7528\u624b\u518c"},{"location":"1-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/","text":"kafka \u57fa\u7840\u64cd\u4f5c \u9884\u8bbe\u73af\u5883\u53d8\u91cf \u9884\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u65b9\u4fbf\u64cd\u4f5c\uff1a # \u5c06 kafka \u547d\u4ee4\u811a\u672c\u8def\u5f84\u52a0\u5165\u5230 PATH export KAFKA_HOME = /usr/local/kafka export PATH = \" $PATH : ${ KAFKA_HOME } /bin\" # zk \u8fde\u63a5\u5730\u5740 export ZK_CONNECT = \" $( hostname ) :2181\" # kafka \u8fde\u63a5\u5730\u5740 export BOOTSTRAP_SERVER = \" $( hostname ) :9092\" # \u5982\u679c\u6709 jaas \u8ba4\u8bc1 export KAFKA_OPTS = \"-Djava.security.auth.login.config= ${ KAFKA_HOME } /config/kafka_server_jaas.conf\" # \u5982\u679c broker \u901a\u8fc7\u5728 kafka-run-class.sh \u6587\u4ef6\u5185\u8bbe\u7f6e JMX_PORT\uff0c\u5219\u8fd9\u91cc\u9700\u8981\u8bbe\u7f6e\u6210\u4e0d\u540c\u7684 port # (\u4e00\u822c broker \u5f00\u542f JMX_PORT \u6700\u597d\u5728 kafka-server-start.sh \u6587\u4ef6\u5185\u8bbe\u7f6e\uff0ckafka-run-class.sh \u6587\u4ef6\u5185\u7684\u4fee\u6539\u4f1a\u5f71\u54cd\u5230\u6240\u6709\u547d\u4ee4\u811a\u672c) export JMX_PORT = 9997 \u57fa\u672c\u64cd\u4f5c topic \u521b\u5efa topic kafka-topics.sh --zookeeper ${ZK_CONNECT} --create --replication-factor 3 --partitions 3 --topic __test kafka-topics.sh --bootstrap-server ${BOOTSTRAP_SERVER} --create --replication-factor 3 --partitions 3 --topic __test \u5220\u9664 topic kafka-topics.sh --zookeeper ${ZK_CONNECT} --delete --topic __test kafka-topics.sh --bootstrap-server ${BOOTSTRAP_SERVER} --delete --topic __test topic \u5217\u8868 kafka-topics.sh --zookeeper ${ZK_CONNECT} --list kafka-topics.sh --bootstrap-server ${BOOTSTRAP_SERVER} --list topic \u8be6\u60c5 kafka-topics.sh --zookeeper ${ZK_CONNECT} --describe --topic test kafka-topics.sh --bootstrap-server ${BOOTSTRAP_SERVER} --describe --topic __test \u4fee\u6539 topic \u5206\u533a\u6570 kafka-topics.sh --zookeeper ${ZK_CONNECT} --alter --topic __test --partitions 5 kafka-topics.sh --bootstrap-server ${BOOTSTRAP_SERVER} --alter --topic __test --partitions 5 \u751f\u4ea7/\u6d88\u8d39 \u751f\u4ea7 \u6d88\u606f kafka-console-producer.sh --broker-list ${BOOTSTRAP_SERVER} --topic __test kafka-console-producer.sh --bootstrap-server ${BOOTSTRAP_SERVER} --topic __test \u6d88\u8d39 \u6d88\u606f kafka-console-consumer.sh --bootstrap-server ${BOOTSTRAP_SERVER} --topic __test --from-beginning kafka-console-consumer.sh --property print.timestamp=true --property print.key=true \\ --bootstrap-server ${BOOTSTRAP_SERVER} --group test_group --topic test --from-beginning consumer consumer \u5217\u8868 # \u8bb0\u5f55\u5728 zookeeper \u4e2d\u7684\u6d88\u8d39\u7ec4\uff082.x.x \u7248\u672c\u4ee5\u4e0a\u5e9f\u5f03\uff09 kafka-consumer-groups.sh --zookeeper ${ZK_CONNECT} --list # \u8bb0\u5f55\u5728 __consumer_offsets \u4e2d\u7684\u6d88\u8d39\u7ec4\uff0cKafka \u7248\u672c <= 0.9.x.x kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --list --new-consumer # \u8bb0\u5f55\u5728 __consumer_offsets \u4e2d\u7684\u6d88\u8d39\u7ec4\uff0cKafka \u7248\u672c > 0.9.x.x kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --list consumer \u8be6\u60c5 # \u8bb0\u5f55\u5728 zookeeper \u4e2d\u7684\u6d88\u8d39\u7ec4\uff082.x.x \u7248\u672c\u4ee5\u4e0a\u5e9f\u5f03\uff09 kafka-consumer-groups.sh --zookeeper ${ZK_CONNECT} --describe --group $group # \u8bb0\u5f55\u5728 __consumer_offsets \u4e2d\u7684\u6d88\u8d39\u7ec4\uff0cKafka \u7248\u672c <= 0.9.x.x kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --new-consumer --describe --group $group # \u8bb0\u5f55\u5728 __consumer_offsets \u4e2d\u7684\u6d88\u8d39\u7ec4\uff0cKafka \u7248\u672c > 0.9.x.x kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --describe --group $group kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --describe --group my-group --members kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --describe --group my-group --members --verbose kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --describe --group my-group --state \u6d88\u8d39\u8005\u9009\u9879 \u4f7f\u7528 zookeeper \u4fdd\u5b58\u6d88\u8d39\u7ec4\u6570\u636e\uff082.x.x \u7248\u672c\u4ee5\u4e0a\u5e9f\u5f03\uff09: --zookeeper localhost:2181 \u4f7f\u7528 __consumer_offsets \u4fdd\u5b58\u6d88\u8d39\u7ec4\u6570\u636e: --bootstrap-server localhost:9092 \u6307\u5b9a group \u540d: --group group1 --consumer-property group.id=group1 \u6307\u5b9a topic: --topic foo --whitelist \".*\" \u6307\u5b9a partition: --partition 0 \u6307\u5b9a offset: --from-beginning --offset 3418783 \u6d88\u8d39\u591a\u5c11\u6761\u6d88\u606f: --max-messages 10 ZK Group\uff082.x.x \u7248\u672c\u4ee5\u4e0a\u5e9f\u5f03\uff09 kafka-console-consumer.sh --zookeeper ${ZK_CONNECT} --topic test --from-beginning --group group1 kafka-console-consumer.sh --zookeeper ${ZK_CONNECT} --topic test --consumer-property group.id=group1 KF Group kafka-console-consumer.sh --bootstrap-server ${BOOTSTRAP_SERVER} --topic test kafka-console-consumer.sh --bootstrap-server ${BOOTSTRAP_SERVER} --whitelist \".*\" property kafka-console-consumer.sh --property print.timestamp=true --property print.key=true --bootstrap-server ${BOOTSTRAP_SERVER} --topic __test --from-beginning \u4ece\u6307\u5b9a partition, offset \u5f00\u59cb\u6d88\u8d39 $ kafka-console-consumer.sh --bootstrap-server ${BOOTSTRAP_SERVER} --topic logs --offset 3418783 --partition 0 --group __test_group \u4ece\u6307\u5b9a partition, offset \u5f00\u59cb\u6d88\u8d39\u6307\u5b9a\u6570\u91cf\u6d88\u606f\uff1a kafka-console-consumer.sh --bootstrap-server ${BOOTSTRAP_SERVER} --topic logs --offset 1340190464 --partition 7 --max-messages 10 --group __test_group \u5206\u533a\u91cd\u5206\u914d/\u4fee\u6539\u526f\u672c\u6570 \u83b7\u53d6\u5f53\u524d broker id \u5217\u8868\uff1a $ zookeeper-shell.sh ${ZK_CONNECT} ls /brokers/ids | sed 's/ //g' \u521b\u5efa topics.json \u6587\u4ef6\uff0c\u6587\u4ef6\u5185\u5bb9\u4e3a\u9700\u8981\u91cd\u5206\u533a\u7684 topic\uff0c\u4f8b\u5982\uff1a { \"topics\" : [ { \"topic\" : \"statistics\" } ], \"version\" : 1 } \u6267\u884c kafka-reassign-partitions.sh \uff0c\u6307\u5b9a --generate \u53c2\u6570\u548c\u521a\u624d\u521b\u5efa\u7684 topics.json \u6587\u4ef6\uff0c\u901a\u8fc7 --broker-list \u6307\u5b9a\u5206\u5e03\u7684 broker id\uff0c\u751f\u6210\u63cf\u8ff0 partition \u5206\u5e03\u7684\u5185\u5bb9\uff1a $ kafka-reassign-partitions.sh --zookeeper ${ZK_CONNECT}:2181 --generate --topics-to-move-json-file topics.json --broker-list 1,2,3 | tee plan Current partition replica assignment {\"version\":1,\"partitions\":[{\"topic\":\"statistics\",\"partition\":0,\"replicas\":[3],\"log_dirs\":[\"any\"]}]} Proposed partition reassignment configuration {\"version\":1,\"partitions\":[{\"topic\":\"statistics\",\"partition\":0,\"replicas\":[1],\"log_dirs\":[\"any\"]}]} \u547d\u4ee4\u4f1a\u7ed9\u51fa\u73b0\u5728\u7684 partition \u5206\u5e03\u548c\u76ee\u7684 partition \u5206\u5e03\uff0c\u5c06\u751f\u6210\u7684\u5185\u5bb9\u5206\u522b\u4fdd\u5b58\u5230 current.json (\u7528\u4e8e\u6062\u590d) reassign.json (\u4e4b\u540e\u7684\u8ba1\u5212) $ sed -n '2p' plan > current.json $ sed -n '5p' plan > reassign.json \u53ef\u4ee5\u8c03\u6574 replicas.json \u7684\u5185\u5bb9\uff0c replicas \u5b57\u6bb5\u7684\u542b\u4e49\u662f\u8be5 partition \u5206\u5e03\u7684 broker id\uff1a 1. \u901a\u8fc7\u589e\u52a0/\u51cf\u5c11 replicas \u4e2d\u7684 broker id \u53ef\u4ee5\u589e\u52a0/\u51cf\u5c11\u526f\u672c\uff08 log_dirs \u5305\u542b\u7684\u9879\u8981\u4e0e replicas \u5305\u542b\u7684\u9879\u6570\u76ee\u4e00\u81f4\uff09 2. \u8c03\u6574 replicas \u5b57\u6bb5\u7684\u7b2c\u4e00\u4e2a broker id \u53ef\u4ee5\u6307\u5b9a\u8fd9\u4e2a partition \u7684\u4f18\u5148 leader { \"partitions\" : [ { \"log_dirs\" : [ \"any\" , \"any\" , \"any\" ], \"partition\" : 0 , \"replicas\" : [ 1 , 2 , 3 ], \"topic\" : \"statistics\" } ], \"version\" : 1 } \u4f4e\u7248\u672c\u6ca1\u6709 log_dirs \u5b57\u6bb5\uff0c\u53ef\u4ee5\u5ffd\u7565 \u6267\u884c kafka-reassign-partitions.sh \uff0c\u6307\u5b9a --execute \u53c2\u6570\u548c reassign.json \u6587\u4ef6\uff0c\u6267\u884c partition \u91cd\u5206\u5e03\uff1a $ kafka-reassign-partitions.sh --zookeeper ${ZK_CONNECT} --execute --reassignment-json-file reassign.json \u6267\u884c kafka-reassign-partitions.sh \uff0c\u6307\u5b9a --verify \u53c2\u6570\u548c reassign.json \u6587\u4ef6\uff0c\u786e\u8ba4 partition \u91cd\u5206\u5e03\u8fdb\u5ea6\uff1a $ kafka-reassign-partitions.sh --zookeeper ${ZK_CONNECT} --verify --reassignment-json-file reassign.json \u5982\u679c topic \u6570\u636e\u91cf\u548c\u6d41\u91cf\u8fc7\u5927\uff0c\u91cd\u5206\u533a\u4f1a\u5bf9\u96c6\u7fa4\u670d\u52a1\u9020\u6210\u6bd4\u8f83\u5927\u7684\u5f71\u54cd\uff0c\u6b64\u65f6\u53ef\u4ee5\u5bf9\u91cd\u5206\u533a\u9650\u5236\u6d41\u91cf\uff0c\u6bd4\u5982\u9650\u5236\u4e0d\u8d85\u8fc7 50MB/s\uff1a $ kafka-reassign-partitions.sh --zookeeper ${ZK_CONNECT} --execute --reassignment-json-file reassign.json --throttle 50000000 \u53c2\u8003\uff1a https://kafka.apache.org/documentation/#rep-throttle \u4fee\u6539 topic \u53c2\u6570 \u4fdd\u7559\u5927\u5c0f $ kafka-configs.sh --zookeeper ${ZK_CONNECT} --alter --entity-type topics --entity-name __test --add-config max.message.bytes=4194304 \u4fdd\u7559\u65f6\u95f4 $ kafka-configs.sh --zookeeper ${ZK_CONNECT} --alter --entity-type topics --entity-name __test --add-config retention.ms=259200000 \u4fee\u6539 __consumer_offsets \u4fdd\u7559\u7b56\u7565 $ kafka-configs.sh --zookeeper ${ZK_CONNECT} --describe --entity-type topics --entity-name __consumer_offsets $ kafka-configs.sh --zookeeper ${ZK_CONNECT} --alter --entity-type topics --entity-name __consumer_offsets --delete-config cleanup.policy $ kafka-configs.sh --zookeeper ${ZK_CONNECT} --alter --entity-type topics --entity-name __consumer_offsets --add-config retention.ms=2592000000 $ kafka-configs.sh --zookeeper ${ZK_CONNECT} --alter --entity-type topics --entity-name __consumer_offsets --add-config cleanup.policy=delete $ kafka-configs.sh --zookeeper ${ZK_CONNECT} --alter --entity-type topics --entity-name __consumer_offsets --delete-config retention.ms $ kafka-configs.sh --zookeeper ${ZK_CONNECT} --alter --entity-type topics --entity-name __consumer_offsets --add-config cleanup.policy=compact \u91cd\u65b0\u5e73\u8861 leader \u89e6\u53d1\u96c6\u7fa4\u5185\u6240\u6709 topic partition \u7684\u6700\u4f18 leader \u9009\u4e3e: $ kafka-preferred-replica-election.sh --zookeeper ${ZK_CONNECT} \u89e6\u53d1 partitions.json \u6587\u4ef6\u6307\u5b9a\u7684 topic partition \u7684\u6700\u4f18 leader \u9009\u4e3e: kafka-preferred-replica-election.sh --zookeeper ${ZK_CONNECT} --path-to-json-file partitions.json partitions.json \u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a { \"partitions\" : [ { \"partition\" : 45 , \"topic\" : \"a8a3cbf02a7e4aa7b1b52ab5297f9066__sku2ava_rec\" } ] } \u5220\u9664\u6d88\u8d39\u7ec4 KF \u7c7b\u578b $ kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --delete --group console-consumer-97214 ZK \u7c7b\u578b $ kafka-consumer-groups.sh --zookeeper ${ZK_CONNECT} --delete --group console-consumer-38645 \u67e5\u770b topic offset \u6700\u7ec8\u7684 offset $ kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list ${BOOTSTRAP_SERVER} --time -1 --topic test \u6700\u65e9\u7684 offset $ kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list ${BOOTSTRAP_SERVER} --time -2 --topic test \u8bbe\u7f6e consumer current offset \u91cd\u7f6e offset \u5230\u6700\u65b0\u4f4d\u7f6e\uff1a kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --reset-offsets --to-latest --group $group --topic $topic --execute \u8bbe\u7f6e\u5230\u6307\u5b9a\u7684 offset\uff1a kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --group $group --reset-offsets --to-offset 6250 --topic $topic --execute \u6839\u636e\u65f6\u95f4\u8bbe\u7f6e\uff0c\u8bbe\u7f6e\u5230\u5927\u4e8e\u7b49\u4e8e\u8be5\u65f6\u95f4\u7684\u7b2c\u4e00\u4e2a offset\uff1a kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --group $group --reset-offsets --to-datetime 2019-12-12T16:59:59.000 --topic $topic --execute \u8bfb\u53d6 __consumer_offsets 0.11.0.0 \u4e4b\u524d\u7248\u672c $ kafka-console-consumer.sh --formatter \"kafka.coordinator.GroupMetadataManager\\$OffsetsMessageFormatter\" --zookeeper ${ZK_CONNECT} --topic __consumer_offsets 0.11.0.0 \u4e4b\u540e\u7248\u672c(\u542b) $ kafka-console-consumer.sh --formatter \"kafka.coordinator.group.GroupMetadataManager\\$OffsetsMessageFormatter\" --bootstrap-server ${BOOTSTRAP_SERVER} --topic __consumer_offsets \u683c\u5f0f\uff1a [Group, Topic, Partition]::[OffsetMetadata[Offset, Metadata], CommitTime, ExpirationTime] \u5206\u533a\u89c4\u5219\uff1a Math.abs(groupID.hashCode()) % numPartitions \u67e5\u770b\u65e5\u5fd7/\u7d22\u5f15\u6587\u4ef6 \u67e5\u770b\u65e5\u5fd7\u6587\u4ef6 $ kafka-run-class.sh kafka.tools.DumpLogSegments --files ./00000000000000283198.log --print-data-log \u67e5\u770b\u7d22\u5f15\u6587\u4ef6 $ kafka-run-class.sh kafka.tools.DumpLogSegments --files 0000000000000045.timeindex \u67e5\u770b\u8bf7\u6c42\u4f7f\u7528\u7684 API Version $ kafka-broker-api-versions.sh --bootstrap-server ${BOOTSTRAP_SERVER} \u67e5\u770b\u526f\u672c\u540c\u6b65 lag kafka-replica-verification.sh --broker-list ${BOOTSTRAP_SERVER} kafka-replica-verification.sh --broker-list ${BOOTSTRAP_SERVER} --topic-white-list .*","title":"1. \u57fa\u7840\u64cd\u4f5c"},{"location":"1-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#kafka","text":"","title":"kafka \u57fa\u7840\u64cd\u4f5c"},{"location":"1-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#_1","text":"\u9884\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u65b9\u4fbf\u64cd\u4f5c\uff1a # \u5c06 kafka \u547d\u4ee4\u811a\u672c\u8def\u5f84\u52a0\u5165\u5230 PATH export KAFKA_HOME = /usr/local/kafka export PATH = \" $PATH : ${ KAFKA_HOME } /bin\" # zk \u8fde\u63a5\u5730\u5740 export ZK_CONNECT = \" $( hostname ) :2181\" # kafka \u8fde\u63a5\u5730\u5740 export BOOTSTRAP_SERVER = \" $( hostname ) :9092\" # \u5982\u679c\u6709 jaas \u8ba4\u8bc1 export KAFKA_OPTS = \"-Djava.security.auth.login.config= ${ KAFKA_HOME } /config/kafka_server_jaas.conf\" # \u5982\u679c broker \u901a\u8fc7\u5728 kafka-run-class.sh \u6587\u4ef6\u5185\u8bbe\u7f6e JMX_PORT\uff0c\u5219\u8fd9\u91cc\u9700\u8981\u8bbe\u7f6e\u6210\u4e0d\u540c\u7684 port # (\u4e00\u822c broker \u5f00\u542f JMX_PORT \u6700\u597d\u5728 kafka-server-start.sh \u6587\u4ef6\u5185\u8bbe\u7f6e\uff0ckafka-run-class.sh \u6587\u4ef6\u5185\u7684\u4fee\u6539\u4f1a\u5f71\u54cd\u5230\u6240\u6709\u547d\u4ee4\u811a\u672c) export JMX_PORT = 9997","title":"\u9884\u8bbe\u73af\u5883\u53d8\u91cf"},{"location":"1-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#_2","text":"","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"1-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#topic","text":"\u521b\u5efa topic kafka-topics.sh --zookeeper ${ZK_CONNECT} --create --replication-factor 3 --partitions 3 --topic __test kafka-topics.sh --bootstrap-server ${BOOTSTRAP_SERVER} --create --replication-factor 3 --partitions 3 --topic __test \u5220\u9664 topic kafka-topics.sh --zookeeper ${ZK_CONNECT} --delete --topic __test kafka-topics.sh --bootstrap-server ${BOOTSTRAP_SERVER} --delete --topic __test topic \u5217\u8868 kafka-topics.sh --zookeeper ${ZK_CONNECT} --list kafka-topics.sh --bootstrap-server ${BOOTSTRAP_SERVER} --list topic \u8be6\u60c5 kafka-topics.sh --zookeeper ${ZK_CONNECT} --describe --topic test kafka-topics.sh --bootstrap-server ${BOOTSTRAP_SERVER} --describe --topic __test \u4fee\u6539 topic \u5206\u533a\u6570 kafka-topics.sh --zookeeper ${ZK_CONNECT} --alter --topic __test --partitions 5 kafka-topics.sh --bootstrap-server ${BOOTSTRAP_SERVER} --alter --topic __test --partitions 5","title":"topic"},{"location":"1-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#_3","text":"\u751f\u4ea7 \u6d88\u606f kafka-console-producer.sh --broker-list ${BOOTSTRAP_SERVER} --topic __test kafka-console-producer.sh --bootstrap-server ${BOOTSTRAP_SERVER} --topic __test \u6d88\u8d39 \u6d88\u606f kafka-console-consumer.sh --bootstrap-server ${BOOTSTRAP_SERVER} --topic __test --from-beginning kafka-console-consumer.sh --property print.timestamp=true --property print.key=true \\ --bootstrap-server ${BOOTSTRAP_SERVER} --group test_group --topic test --from-beginning","title":"\u751f\u4ea7/\u6d88\u8d39"},{"location":"1-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#consumer","text":"consumer \u5217\u8868 # \u8bb0\u5f55\u5728 zookeeper \u4e2d\u7684\u6d88\u8d39\u7ec4\uff082.x.x \u7248\u672c\u4ee5\u4e0a\u5e9f\u5f03\uff09 kafka-consumer-groups.sh --zookeeper ${ZK_CONNECT} --list # \u8bb0\u5f55\u5728 __consumer_offsets \u4e2d\u7684\u6d88\u8d39\u7ec4\uff0cKafka \u7248\u672c <= 0.9.x.x kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --list --new-consumer # \u8bb0\u5f55\u5728 __consumer_offsets \u4e2d\u7684\u6d88\u8d39\u7ec4\uff0cKafka \u7248\u672c > 0.9.x.x kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --list consumer \u8be6\u60c5 # \u8bb0\u5f55\u5728 zookeeper \u4e2d\u7684\u6d88\u8d39\u7ec4\uff082.x.x \u7248\u672c\u4ee5\u4e0a\u5e9f\u5f03\uff09 kafka-consumer-groups.sh --zookeeper ${ZK_CONNECT} --describe --group $group # \u8bb0\u5f55\u5728 __consumer_offsets \u4e2d\u7684\u6d88\u8d39\u7ec4\uff0cKafka \u7248\u672c <= 0.9.x.x kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --new-consumer --describe --group $group # \u8bb0\u5f55\u5728 __consumer_offsets \u4e2d\u7684\u6d88\u8d39\u7ec4\uff0cKafka \u7248\u672c > 0.9.x.x kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --describe --group $group kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --describe --group my-group --members kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --describe --group my-group --members --verbose kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --describe --group my-group --state","title":"consumer"},{"location":"1-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#_4","text":"\u4f7f\u7528 zookeeper \u4fdd\u5b58\u6d88\u8d39\u7ec4\u6570\u636e\uff082.x.x \u7248\u672c\u4ee5\u4e0a\u5e9f\u5f03\uff09: --zookeeper localhost:2181 \u4f7f\u7528 __consumer_offsets \u4fdd\u5b58\u6d88\u8d39\u7ec4\u6570\u636e: --bootstrap-server localhost:9092 \u6307\u5b9a group \u540d: --group group1 --consumer-property group.id=group1 \u6307\u5b9a topic: --topic foo --whitelist \".*\" \u6307\u5b9a partition: --partition 0 \u6307\u5b9a offset: --from-beginning --offset 3418783 \u6d88\u8d39\u591a\u5c11\u6761\u6d88\u606f: --max-messages 10 ZK Group\uff082.x.x \u7248\u672c\u4ee5\u4e0a\u5e9f\u5f03\uff09 kafka-console-consumer.sh --zookeeper ${ZK_CONNECT} --topic test --from-beginning --group group1 kafka-console-consumer.sh --zookeeper ${ZK_CONNECT} --topic test --consumer-property group.id=group1 KF Group kafka-console-consumer.sh --bootstrap-server ${BOOTSTRAP_SERVER} --topic test kafka-console-consumer.sh --bootstrap-server ${BOOTSTRAP_SERVER} --whitelist \".*\" property kafka-console-consumer.sh --property print.timestamp=true --property print.key=true --bootstrap-server ${BOOTSTRAP_SERVER} --topic __test --from-beginning \u4ece\u6307\u5b9a partition, offset \u5f00\u59cb\u6d88\u8d39 $ kafka-console-consumer.sh --bootstrap-server ${BOOTSTRAP_SERVER} --topic logs --offset 3418783 --partition 0 --group __test_group \u4ece\u6307\u5b9a partition, offset \u5f00\u59cb\u6d88\u8d39\u6307\u5b9a\u6570\u91cf\u6d88\u606f\uff1a kafka-console-consumer.sh --bootstrap-server ${BOOTSTRAP_SERVER} --topic logs --offset 1340190464 --partition 7 --max-messages 10 --group __test_group","title":"\u6d88\u8d39\u8005\u9009\u9879"},{"location":"1-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#_5","text":"\u83b7\u53d6\u5f53\u524d broker id \u5217\u8868\uff1a $ zookeeper-shell.sh ${ZK_CONNECT} ls /brokers/ids | sed 's/ //g' \u521b\u5efa topics.json \u6587\u4ef6\uff0c\u6587\u4ef6\u5185\u5bb9\u4e3a\u9700\u8981\u91cd\u5206\u533a\u7684 topic\uff0c\u4f8b\u5982\uff1a { \"topics\" : [ { \"topic\" : \"statistics\" } ], \"version\" : 1 } \u6267\u884c kafka-reassign-partitions.sh \uff0c\u6307\u5b9a --generate \u53c2\u6570\u548c\u521a\u624d\u521b\u5efa\u7684 topics.json \u6587\u4ef6\uff0c\u901a\u8fc7 --broker-list \u6307\u5b9a\u5206\u5e03\u7684 broker id\uff0c\u751f\u6210\u63cf\u8ff0 partition \u5206\u5e03\u7684\u5185\u5bb9\uff1a $ kafka-reassign-partitions.sh --zookeeper ${ZK_CONNECT}:2181 --generate --topics-to-move-json-file topics.json --broker-list 1,2,3 | tee plan Current partition replica assignment {\"version\":1,\"partitions\":[{\"topic\":\"statistics\",\"partition\":0,\"replicas\":[3],\"log_dirs\":[\"any\"]}]} Proposed partition reassignment configuration {\"version\":1,\"partitions\":[{\"topic\":\"statistics\",\"partition\":0,\"replicas\":[1],\"log_dirs\":[\"any\"]}]} \u547d\u4ee4\u4f1a\u7ed9\u51fa\u73b0\u5728\u7684 partition \u5206\u5e03\u548c\u76ee\u7684 partition \u5206\u5e03\uff0c\u5c06\u751f\u6210\u7684\u5185\u5bb9\u5206\u522b\u4fdd\u5b58\u5230 current.json (\u7528\u4e8e\u6062\u590d) reassign.json (\u4e4b\u540e\u7684\u8ba1\u5212) $ sed -n '2p' plan > current.json $ sed -n '5p' plan > reassign.json \u53ef\u4ee5\u8c03\u6574 replicas.json \u7684\u5185\u5bb9\uff0c replicas \u5b57\u6bb5\u7684\u542b\u4e49\u662f\u8be5 partition \u5206\u5e03\u7684 broker id\uff1a 1. \u901a\u8fc7\u589e\u52a0/\u51cf\u5c11 replicas \u4e2d\u7684 broker id \u53ef\u4ee5\u589e\u52a0/\u51cf\u5c11\u526f\u672c\uff08 log_dirs \u5305\u542b\u7684\u9879\u8981\u4e0e replicas \u5305\u542b\u7684\u9879\u6570\u76ee\u4e00\u81f4\uff09 2. \u8c03\u6574 replicas \u5b57\u6bb5\u7684\u7b2c\u4e00\u4e2a broker id \u53ef\u4ee5\u6307\u5b9a\u8fd9\u4e2a partition \u7684\u4f18\u5148 leader { \"partitions\" : [ { \"log_dirs\" : [ \"any\" , \"any\" , \"any\" ], \"partition\" : 0 , \"replicas\" : [ 1 , 2 , 3 ], \"topic\" : \"statistics\" } ], \"version\" : 1 } \u4f4e\u7248\u672c\u6ca1\u6709 log_dirs \u5b57\u6bb5\uff0c\u53ef\u4ee5\u5ffd\u7565 \u6267\u884c kafka-reassign-partitions.sh \uff0c\u6307\u5b9a --execute \u53c2\u6570\u548c reassign.json \u6587\u4ef6\uff0c\u6267\u884c partition \u91cd\u5206\u5e03\uff1a $ kafka-reassign-partitions.sh --zookeeper ${ZK_CONNECT} --execute --reassignment-json-file reassign.json \u6267\u884c kafka-reassign-partitions.sh \uff0c\u6307\u5b9a --verify \u53c2\u6570\u548c reassign.json \u6587\u4ef6\uff0c\u786e\u8ba4 partition \u91cd\u5206\u5e03\u8fdb\u5ea6\uff1a $ kafka-reassign-partitions.sh --zookeeper ${ZK_CONNECT} --verify --reassignment-json-file reassign.json \u5982\u679c topic \u6570\u636e\u91cf\u548c\u6d41\u91cf\u8fc7\u5927\uff0c\u91cd\u5206\u533a\u4f1a\u5bf9\u96c6\u7fa4\u670d\u52a1\u9020\u6210\u6bd4\u8f83\u5927\u7684\u5f71\u54cd\uff0c\u6b64\u65f6\u53ef\u4ee5\u5bf9\u91cd\u5206\u533a\u9650\u5236\u6d41\u91cf\uff0c\u6bd4\u5982\u9650\u5236\u4e0d\u8d85\u8fc7 50MB/s\uff1a $ kafka-reassign-partitions.sh --zookeeper ${ZK_CONNECT} --execute --reassignment-json-file reassign.json --throttle 50000000 \u53c2\u8003\uff1a https://kafka.apache.org/documentation/#rep-throttle","title":"\u5206\u533a\u91cd\u5206\u914d/\u4fee\u6539\u526f\u672c\u6570"},{"location":"1-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#topic_1","text":"\u4fdd\u7559\u5927\u5c0f $ kafka-configs.sh --zookeeper ${ZK_CONNECT} --alter --entity-type topics --entity-name __test --add-config max.message.bytes=4194304 \u4fdd\u7559\u65f6\u95f4 $ kafka-configs.sh --zookeeper ${ZK_CONNECT} --alter --entity-type topics --entity-name __test --add-config retention.ms=259200000 \u4fee\u6539 __consumer_offsets \u4fdd\u7559\u7b56\u7565 $ kafka-configs.sh --zookeeper ${ZK_CONNECT} --describe --entity-type topics --entity-name __consumer_offsets $ kafka-configs.sh --zookeeper ${ZK_CONNECT} --alter --entity-type topics --entity-name __consumer_offsets --delete-config cleanup.policy $ kafka-configs.sh --zookeeper ${ZK_CONNECT} --alter --entity-type topics --entity-name __consumer_offsets --add-config retention.ms=2592000000 $ kafka-configs.sh --zookeeper ${ZK_CONNECT} --alter --entity-type topics --entity-name __consumer_offsets --add-config cleanup.policy=delete $ kafka-configs.sh --zookeeper ${ZK_CONNECT} --alter --entity-type topics --entity-name __consumer_offsets --delete-config retention.ms $ kafka-configs.sh --zookeeper ${ZK_CONNECT} --alter --entity-type topics --entity-name __consumer_offsets --add-config cleanup.policy=compact","title":"\u4fee\u6539 topic \u53c2\u6570"},{"location":"1-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#leader","text":"\u89e6\u53d1\u96c6\u7fa4\u5185\u6240\u6709 topic partition \u7684\u6700\u4f18 leader \u9009\u4e3e: $ kafka-preferred-replica-election.sh --zookeeper ${ZK_CONNECT} \u89e6\u53d1 partitions.json \u6587\u4ef6\u6307\u5b9a\u7684 topic partition \u7684\u6700\u4f18 leader \u9009\u4e3e: kafka-preferred-replica-election.sh --zookeeper ${ZK_CONNECT} --path-to-json-file partitions.json partitions.json \u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a { \"partitions\" : [ { \"partition\" : 45 , \"topic\" : \"a8a3cbf02a7e4aa7b1b52ab5297f9066__sku2ava_rec\" } ] }","title":"\u91cd\u65b0\u5e73\u8861 leader"},{"location":"1-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#_6","text":"KF \u7c7b\u578b $ kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --delete --group console-consumer-97214 ZK \u7c7b\u578b $ kafka-consumer-groups.sh --zookeeper ${ZK_CONNECT} --delete --group console-consumer-38645","title":"\u5220\u9664\u6d88\u8d39\u7ec4"},{"location":"1-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#topic-offset","text":"\u6700\u7ec8\u7684 offset $ kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list ${BOOTSTRAP_SERVER} --time -1 --topic test \u6700\u65e9\u7684 offset $ kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list ${BOOTSTRAP_SERVER} --time -2 --topic test","title":"\u67e5\u770b topic offset"},{"location":"1-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#consumer-current-offset","text":"\u91cd\u7f6e offset \u5230\u6700\u65b0\u4f4d\u7f6e\uff1a kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --reset-offsets --to-latest --group $group --topic $topic --execute \u8bbe\u7f6e\u5230\u6307\u5b9a\u7684 offset\uff1a kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --group $group --reset-offsets --to-offset 6250 --topic $topic --execute \u6839\u636e\u65f6\u95f4\u8bbe\u7f6e\uff0c\u8bbe\u7f6e\u5230\u5927\u4e8e\u7b49\u4e8e\u8be5\u65f6\u95f4\u7684\u7b2c\u4e00\u4e2a offset\uff1a kafka-consumer-groups.sh --bootstrap-server ${BOOTSTRAP_SERVER} --group $group --reset-offsets --to-datetime 2019-12-12T16:59:59.000 --topic $topic --execute","title":"\u8bbe\u7f6e consumer current offset"},{"location":"1-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#__consumer_offsets","text":"0.11.0.0 \u4e4b\u524d\u7248\u672c $ kafka-console-consumer.sh --formatter \"kafka.coordinator.GroupMetadataManager\\$OffsetsMessageFormatter\" --zookeeper ${ZK_CONNECT} --topic __consumer_offsets 0.11.0.0 \u4e4b\u540e\u7248\u672c(\u542b) $ kafka-console-consumer.sh --formatter \"kafka.coordinator.group.GroupMetadataManager\\$OffsetsMessageFormatter\" --bootstrap-server ${BOOTSTRAP_SERVER} --topic __consumer_offsets \u683c\u5f0f\uff1a [Group, Topic, Partition]::[OffsetMetadata[Offset, Metadata], CommitTime, ExpirationTime] \u5206\u533a\u89c4\u5219\uff1a Math.abs(groupID.hashCode()) % numPartitions","title":"\u8bfb\u53d6 __consumer_offsets"},{"location":"1-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#_7","text":"\u67e5\u770b\u65e5\u5fd7\u6587\u4ef6 $ kafka-run-class.sh kafka.tools.DumpLogSegments --files ./00000000000000283198.log --print-data-log \u67e5\u770b\u7d22\u5f15\u6587\u4ef6 $ kafka-run-class.sh kafka.tools.DumpLogSegments --files 0000000000000045.timeindex","title":"\u67e5\u770b\u65e5\u5fd7/\u7d22\u5f15\u6587\u4ef6"},{"location":"1-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#api-version","text":"$ kafka-broker-api-versions.sh --bootstrap-server ${BOOTSTRAP_SERVER}","title":"\u67e5\u770b\u8bf7\u6c42\u4f7f\u7528\u7684 API Version"},{"location":"1-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#lag","text":"kafka-replica-verification.sh --broker-list ${BOOTSTRAP_SERVER} kafka-replica-verification.sh --broker-list ${BOOTSTRAP_SERVER} --topic-white-list .*","title":"\u67e5\u770b\u526f\u672c\u540c\u6b65 lag"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-move-partiton/","text":"\u624b\u52a8\u8fc1\u79fb kafka topic \u5206\u533a\u6570\u636e \u76ee\u7684 \u76ee\u524d\u9047\u5230 2 \u7c7b\u4f7f\u7528\u573a\u666f\uff1a Kafka \u5355\u4e2a\u8282\u70b9\u4e0a\u6302\u8f7d\u591a\u5757\u78c1\u76d8\uff0c\u78c1\u76d8\u4f7f\u7528\u7387\u4e0d\u5747\u5300\uff0c\u6709\u7684\u78c1\u76d8\u5df2\u7ecf 100% \u4e86\uff0c\u6709\u7684\u78c1\u76d8\u8fd8\u6709\u5927\u91cf\u7a7a\u4f59\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4ece\u4f7f\u7528\u7387\u9ad8\u7684\u78c1\u76d8\u79fb\u52a8\u90e8\u5206\u5206\u533a\u5230\u4f7f\u7528\u7387\u4f4e\u7684\u78c1\u76d8\u4e0a\u3002 kafka \u5355\u4e2a\u8282\u70b9\u78c1\u76d8\u6545\u969c\uff0c\u6570\u636e\u4e22\u5931\uff0c\u4f46\u662f topic \u5206\u533a leader \u5e76\u672a\u5207\u6362\uff0cleader \u4e3a -1 \uff0c\u5982\u679c\u5206\u533a\u526f\u672c\u6570\u636e\u8fd8\u5728\uff0c\u6b64\u65f6\u53ef\u4ee5\u5c06\u5206\u533a\u526f\u672c\u6570\u636e\u624b\u52a8\u79fb\u52a8\u5230 leader \u8282\u70b9\u4e0a\uff0c\u6062\u590d\u6570\u636e\u3002 \u6ce8\u610f\uff1a\u8fd9\u91cc\u5e76\u4e0d\u4f1a\u6539\u53d8\u5206\u533a\u5728 broker \u4e0a\u7684\u5206\u5e03\u60c5\u51b5\uff0c\u79fb\u52a8\u540e\u5206\u533a\u8fd8\u5728\u539f\u6765\u7684 broker \u4e0a\u3002\u64cd\u4f5c\u53ea\u662f\u5728\u540c\u4e00\u4e2a broker \u4e0d\u540c\u6570\u636e\u76ee\u5f55\u4e0b\u79fb\u52a8\u5206\u533a\uff0c\u6216\u8005\u5728\u5206\u533a leader, follower \u6240\u5728 broker \u4e4b\u95f4\u590d\u5236\u5206\u533a\u6570\u636e\u3002\u5982\u679c\u60f3\u6539\u53d8\u5206\u533a\u5728 broker \u4e0a\u7684\u5206\u5e03\u60c5\u51b5\uff0c\u5c06\u5206\u533a\u79fb\u52a8\u5230\u539f\u6765\u6ca1\u6709\u5206\u5e03\u7684 broker \u4e0a\uff0c\u8bf7\u53c2\u8003\u300c\u57fa\u7840\u64cd\u4f5c\u300d\u91cc\u7684\u300c\u5206\u533a\u91cd\u5206\u914d\u300d\u8bf4\u660e\u3002 \u539f\u7406 kafka \u6570\u636e\u76ee\u5f55\u7531\u914d\u7f6e\u9879 log.dirs (\u6216 log.dir ) \u6307\u5b9a\uff0c\u6570\u636e\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a - <log.dirs> - <topic.name>-<partition.id> - <segment.offset>.log - <segment.offset>.index - <segment.offset>.timeindex - ... - leader-epoch-checkpoint ... - cleaner-offset-checkpoint - log-start-offset-checkpoint - meta.properties - recovery-point-offset-checkpoint - replication-offset-checkpoint - ... log.dir \u76ee\u5f55\u4e0b\uff0c\u6bcf\u4e2a topic \u5206\u533a\u4ee5 <topic.name>-<partition.id> \u4e3a\u76ee\u5f55\u5b58\u50a8\u81ea\u8eab\u6570\u636e\uff0c\u4e0b\u9762\u6709\u591a\u4e2a segment \u6587\u4ef6\u4e0e\u5176\u7d22\u5f15\u6587\u4ef6: segment \u6587\u4ef6(\u65e5\u5fd7\u5206\u6bb5\u6587\u4ef6)\uff1a\u6587\u4ef6\u540d\u4e3a <segment.offset>.log \uff0c\u5b9e\u9645\u7684\u6570\u636e\u6587\u4ef6\uff0c\u6bcf\u4e2a segment \u6587\u4ef6\u90fd\u5bf9\u5e94 2 \u4e2a\u7d22\u5f15\u6587\u4ef6\uff1a \u504f\u79fb\u91cf\u7d22\u5f15\u6587\u4ef6\uff1a\u6587\u4ef6\u540d\u4e3a <segment.offset>.index \uff0c\u5efa\u7acb\u6d88\u606f\u504f\u79fb\u91cf(offset)\u5230\u7269\u7406\u5730\u5740\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb \u65f6\u95f4\u6233\u7d22\u5f15\u6587\u4ef6\uff1a\u6587\u4ef6\u540d\u4e3a <segment.offset>.timeindex \uff0c\u6839\u636e\u6307\u5b9a\u7684\u65f6\u95f4\u6233(timestamp)\u6765\u67e5\u627e\u5bf9\u5e94\u7684\u504f\u79fb\u4fe1\u606f log.dir \u76ee\u5f55\u4e0b\u9664\u4e86\u4ee5 <topic.name>-<partition.id> \u4e3a\u540d\u7684\u6570\u636e\u76ee\u5f55\uff0c\u8fd8\u6709 4 \u4e2a\u8bb0\u5f55 topic partition offset \u7684\u6587\u4ef6: cleaner-offset-checkpoint log-start-offset-checkpoint recovery-point-offset-checkpoint replication-offset-checkpoint \u8fd9\u4e9b\u6587\u4ef6\u5185\u5bb9\u683c\u5f0f\u4e3a\uff1a 0 <record_partition_num> <topic> <partition.id> <offset> <topic> <partition.id> <offset> <topic> <partition.id> <offset> ... ... <record_partition_num> \u4e3a\u6587\u4ef6\u4e2d\u8bb0\u5f55\u7684\u6761\u6570\uff0c\u4e0b\u9762\u7684\u6bcf\u4e00\u6761\u8bb0\u5f55\u4e3a\u4ee5\u7a7a\u683c\u5206\u9694\u7684 topic \u540d\uff0cpartition\uff0c\u548c\u5bf9\u5e94 offset\u3002 \u79fb\u52a8\u5206\u533a\u6570\u636e\uff0c\u5c31\u662f\u505c\u6b62 kafka \u670d\u52a1\uff0c\u6253\u5305 <topic.name>-<partition.id> \u76ee\u5f55\u6570\u636e\uff0c\u79fb\u52a8\u5230\u5176\u4ed6\u76ee\u5f55\uff0c\u5e76\u4fee\u6539\u5bf9\u5e94\u76ee\u5f55\u7684 recovery-point-offset-checkpoint \u548c replication-offset-checkpoint \u6587\u4ef6\u8bb0\u5f55 \u6b65\u9aa4\u793a\u4f8b \u5047\u8bbe\u6709 2 \u4e2a\u78c1\u76d8 /data1/kafka-logs/ \u548c /data2/kafka-logs \uff0c\u9700\u8981\u628a /data1/kafka-logs/ \u4e0b test_topic \u5206\u533a 1 \u79fb\u52a8\u5230 /data2/kafka-logs/ 1. \u505c\u6b62\u8282\u70b9\u670d\u52a1 2. \u79fb\u52a8\u5206\u533a\u6570\u636e \u6253\u5305\u6570\u636e\u76ee\u5f55\uff1a cd /data1/kafka-logs/ tar zcvf test_topic-1.tar.gz test_topic-1 \u5982\u679c 2 \u5757\u78c1\u76d8\u662f\u540c\u4e00\u4e2a broker \u4e0b mv test_topic-1.tar.gz /data2/kafka-logs/ rm test_topic-1.tar.gz rm -rf test_topic-1 3. \u4fee\u6539 offset \u6587\u4ef6 \u8fdb\u5165 /data1/kafka-logs \u76ee\u5f55\u67e5\u770b replication-offset-checkpoint , replication-offset-checkpoint \u6587\u4ef6\uff0c\u5047\u8bbe\u5185\u5bb9\u5982\u4e0b: recovery-point-offset-checkpoint 0 102 ... test_topic 1 144458735 ... replication-offset-checkpoint 0 102 ... test_topic 1 144465512 ... \u8fdb\u5165 /data2/kafka-logs \u76ee\u5f55\u67e5\u770b replication-offset-checkpoint , replication-offset-checkpoint \u6587\u4ef6\uff0c\u5047\u8bbe\u5185\u5bb9\u5982\u4e0b: recovery-point-offset-checkpoint 0 99 ... ... replication-offset-checkpoint 0 99 ... ... 3.1 \u5728 /data2/kafka-logs \u5bf9\u5e94\u6587\u4ef6\u4e0b\u6dfb\u52a0 test_topic \u7684\u8bb0\u5f55 \u8fdb\u5165 /data2/kafka-logs \u76ee\u5f55\uff0c\u5c06 test_topic \u7684\u8bb0\u5f55\u6dfb\u52a0\u5230\u5bf9\u5e94\u7684\u6587\u4ef6\u4e2d\uff0c\u5e76\u589e\u52a0\u8bb0\u5f55\u6570\uff0c\u6587\u4ef6\u5185\u5bb9\u4fee\u6539\u5982\u4e0b\uff1a recovery-point-offset-checkpoint 0 100 ... ... test_topic 1 144458735 replication-offset-checkpoint 0 100 ... ... test_topic 1 144465512 3.2 \u5728 /data1/kafka-logs \u5bf9\u5e94\u6587\u4ef6\u4e0b\u53bb\u9664 test_topic \u7684\u8bb0\u5f55 \u8fdb\u5165 /data1/kafka-logs \u76ee\u5f55\uff0c\u5c06\u5bf9\u5e94\u7684\u6587\u4ef6\u4e2d test_topic \u7684\u8bb0\u5f55\u53bb\u9664\uff0c\u5e76\u51cf\u5c11\u8bb0\u5f55\u6570\uff0c\u6587\u4ef6\u5185\u5bb9\u4fee\u6539\u5982\u4e0b\uff1a recovery-point-offset-checkpoint 0 101 ... ... replication-offset-checkpoint 0 101 ... ... \u8fd9\u91cc\u7684\u793a\u4f8b\u662f\u540c\u4e00\u8282\u70b9\u4e0d\u540c\u78c1\u76d8\u4e4b\u95f4\u79fb\u52a8\u5206\u533a\uff0c\u5982\u679c\u662f\u4e0d\u540c\u8282\u70b9\u4e4b\u95f4\u6062\u590d\u6570\u636e\uff0c\u8fd9\u91cc\u7684\u8bb0\u5f55\u4e0d\u7528\u53bb\u9664 4. \u542f\u52a8\u8282\u70b9\u670d\u52a1","title":"2.3 \u624b\u52a8\u8fc1\u79fb\u5206\u533a\u6570\u636e"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-move-partiton/#kafka-topic","text":"","title":"\u624b\u52a8\u8fc1\u79fb kafka topic \u5206\u533a\u6570\u636e"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-move-partiton/#_1","text":"\u76ee\u524d\u9047\u5230 2 \u7c7b\u4f7f\u7528\u573a\u666f\uff1a Kafka \u5355\u4e2a\u8282\u70b9\u4e0a\u6302\u8f7d\u591a\u5757\u78c1\u76d8\uff0c\u78c1\u76d8\u4f7f\u7528\u7387\u4e0d\u5747\u5300\uff0c\u6709\u7684\u78c1\u76d8\u5df2\u7ecf 100% \u4e86\uff0c\u6709\u7684\u78c1\u76d8\u8fd8\u6709\u5927\u91cf\u7a7a\u4f59\uff0c\u8fd9\u65f6\u53ef\u4ee5\u4ece\u4f7f\u7528\u7387\u9ad8\u7684\u78c1\u76d8\u79fb\u52a8\u90e8\u5206\u5206\u533a\u5230\u4f7f\u7528\u7387\u4f4e\u7684\u78c1\u76d8\u4e0a\u3002 kafka \u5355\u4e2a\u8282\u70b9\u78c1\u76d8\u6545\u969c\uff0c\u6570\u636e\u4e22\u5931\uff0c\u4f46\u662f topic \u5206\u533a leader \u5e76\u672a\u5207\u6362\uff0cleader \u4e3a -1 \uff0c\u5982\u679c\u5206\u533a\u526f\u672c\u6570\u636e\u8fd8\u5728\uff0c\u6b64\u65f6\u53ef\u4ee5\u5c06\u5206\u533a\u526f\u672c\u6570\u636e\u624b\u52a8\u79fb\u52a8\u5230 leader \u8282\u70b9\u4e0a\uff0c\u6062\u590d\u6570\u636e\u3002 \u6ce8\u610f\uff1a\u8fd9\u91cc\u5e76\u4e0d\u4f1a\u6539\u53d8\u5206\u533a\u5728 broker \u4e0a\u7684\u5206\u5e03\u60c5\u51b5\uff0c\u79fb\u52a8\u540e\u5206\u533a\u8fd8\u5728\u539f\u6765\u7684 broker \u4e0a\u3002\u64cd\u4f5c\u53ea\u662f\u5728\u540c\u4e00\u4e2a broker \u4e0d\u540c\u6570\u636e\u76ee\u5f55\u4e0b\u79fb\u52a8\u5206\u533a\uff0c\u6216\u8005\u5728\u5206\u533a leader, follower \u6240\u5728 broker \u4e4b\u95f4\u590d\u5236\u5206\u533a\u6570\u636e\u3002\u5982\u679c\u60f3\u6539\u53d8\u5206\u533a\u5728 broker \u4e0a\u7684\u5206\u5e03\u60c5\u51b5\uff0c\u5c06\u5206\u533a\u79fb\u52a8\u5230\u539f\u6765\u6ca1\u6709\u5206\u5e03\u7684 broker \u4e0a\uff0c\u8bf7\u53c2\u8003\u300c\u57fa\u7840\u64cd\u4f5c\u300d\u91cc\u7684\u300c\u5206\u533a\u91cd\u5206\u914d\u300d\u8bf4\u660e\u3002","title":"\u76ee\u7684"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-move-partiton/#_2","text":"kafka \u6570\u636e\u76ee\u5f55\u7531\u914d\u7f6e\u9879 log.dirs (\u6216 log.dir ) \u6307\u5b9a\uff0c\u6570\u636e\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a - <log.dirs> - <topic.name>-<partition.id> - <segment.offset>.log - <segment.offset>.index - <segment.offset>.timeindex - ... - leader-epoch-checkpoint ... - cleaner-offset-checkpoint - log-start-offset-checkpoint - meta.properties - recovery-point-offset-checkpoint - replication-offset-checkpoint - ... log.dir \u76ee\u5f55\u4e0b\uff0c\u6bcf\u4e2a topic \u5206\u533a\u4ee5 <topic.name>-<partition.id> \u4e3a\u76ee\u5f55\u5b58\u50a8\u81ea\u8eab\u6570\u636e\uff0c\u4e0b\u9762\u6709\u591a\u4e2a segment \u6587\u4ef6\u4e0e\u5176\u7d22\u5f15\u6587\u4ef6: segment \u6587\u4ef6(\u65e5\u5fd7\u5206\u6bb5\u6587\u4ef6)\uff1a\u6587\u4ef6\u540d\u4e3a <segment.offset>.log \uff0c\u5b9e\u9645\u7684\u6570\u636e\u6587\u4ef6\uff0c\u6bcf\u4e2a segment \u6587\u4ef6\u90fd\u5bf9\u5e94 2 \u4e2a\u7d22\u5f15\u6587\u4ef6\uff1a \u504f\u79fb\u91cf\u7d22\u5f15\u6587\u4ef6\uff1a\u6587\u4ef6\u540d\u4e3a <segment.offset>.index \uff0c\u5efa\u7acb\u6d88\u606f\u504f\u79fb\u91cf(offset)\u5230\u7269\u7406\u5730\u5740\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb \u65f6\u95f4\u6233\u7d22\u5f15\u6587\u4ef6\uff1a\u6587\u4ef6\u540d\u4e3a <segment.offset>.timeindex \uff0c\u6839\u636e\u6307\u5b9a\u7684\u65f6\u95f4\u6233(timestamp)\u6765\u67e5\u627e\u5bf9\u5e94\u7684\u504f\u79fb\u4fe1\u606f log.dir \u76ee\u5f55\u4e0b\u9664\u4e86\u4ee5 <topic.name>-<partition.id> \u4e3a\u540d\u7684\u6570\u636e\u76ee\u5f55\uff0c\u8fd8\u6709 4 \u4e2a\u8bb0\u5f55 topic partition offset \u7684\u6587\u4ef6: cleaner-offset-checkpoint log-start-offset-checkpoint recovery-point-offset-checkpoint replication-offset-checkpoint \u8fd9\u4e9b\u6587\u4ef6\u5185\u5bb9\u683c\u5f0f\u4e3a\uff1a 0 <record_partition_num> <topic> <partition.id> <offset> <topic> <partition.id> <offset> <topic> <partition.id> <offset> ... ... <record_partition_num> \u4e3a\u6587\u4ef6\u4e2d\u8bb0\u5f55\u7684\u6761\u6570\uff0c\u4e0b\u9762\u7684\u6bcf\u4e00\u6761\u8bb0\u5f55\u4e3a\u4ee5\u7a7a\u683c\u5206\u9694\u7684 topic \u540d\uff0cpartition\uff0c\u548c\u5bf9\u5e94 offset\u3002 \u79fb\u52a8\u5206\u533a\u6570\u636e\uff0c\u5c31\u662f\u505c\u6b62 kafka \u670d\u52a1\uff0c\u6253\u5305 <topic.name>-<partition.id> \u76ee\u5f55\u6570\u636e\uff0c\u79fb\u52a8\u5230\u5176\u4ed6\u76ee\u5f55\uff0c\u5e76\u4fee\u6539\u5bf9\u5e94\u76ee\u5f55\u7684 recovery-point-offset-checkpoint \u548c replication-offset-checkpoint \u6587\u4ef6\u8bb0\u5f55","title":"\u539f\u7406"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-move-partiton/#_3","text":"\u5047\u8bbe\u6709 2 \u4e2a\u78c1\u76d8 /data1/kafka-logs/ \u548c /data2/kafka-logs \uff0c\u9700\u8981\u628a /data1/kafka-logs/ \u4e0b test_topic \u5206\u533a 1 \u79fb\u52a8\u5230 /data2/kafka-logs/","title":"\u6b65\u9aa4\u793a\u4f8b"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-move-partiton/#1","text":"","title":"1. \u505c\u6b62\u8282\u70b9\u670d\u52a1"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-move-partiton/#2","text":"\u6253\u5305\u6570\u636e\u76ee\u5f55\uff1a cd /data1/kafka-logs/ tar zcvf test_topic-1.tar.gz test_topic-1 \u5982\u679c 2 \u5757\u78c1\u76d8\u662f\u540c\u4e00\u4e2a broker \u4e0b mv test_topic-1.tar.gz /data2/kafka-logs/ rm test_topic-1.tar.gz rm -rf test_topic-1","title":"2. \u79fb\u52a8\u5206\u533a\u6570\u636e"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-move-partiton/#3-offset","text":"\u8fdb\u5165 /data1/kafka-logs \u76ee\u5f55\u67e5\u770b replication-offset-checkpoint , replication-offset-checkpoint \u6587\u4ef6\uff0c\u5047\u8bbe\u5185\u5bb9\u5982\u4e0b: recovery-point-offset-checkpoint 0 102 ... test_topic 1 144458735 ... replication-offset-checkpoint 0 102 ... test_topic 1 144465512 ... \u8fdb\u5165 /data2/kafka-logs \u76ee\u5f55\u67e5\u770b replication-offset-checkpoint , replication-offset-checkpoint \u6587\u4ef6\uff0c\u5047\u8bbe\u5185\u5bb9\u5982\u4e0b: recovery-point-offset-checkpoint 0 99 ... ... replication-offset-checkpoint 0 99 ... ...","title":"3. \u4fee\u6539 offset \u6587\u4ef6"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-move-partiton/#31-data2kafka-logs-test_topic","text":"\u8fdb\u5165 /data2/kafka-logs \u76ee\u5f55\uff0c\u5c06 test_topic \u7684\u8bb0\u5f55\u6dfb\u52a0\u5230\u5bf9\u5e94\u7684\u6587\u4ef6\u4e2d\uff0c\u5e76\u589e\u52a0\u8bb0\u5f55\u6570\uff0c\u6587\u4ef6\u5185\u5bb9\u4fee\u6539\u5982\u4e0b\uff1a recovery-point-offset-checkpoint 0 100 ... ... test_topic 1 144458735 replication-offset-checkpoint 0 100 ... ... test_topic 1 144465512","title":"3.1 \u5728 /data2/kafka-logs \u5bf9\u5e94\u6587\u4ef6\u4e0b\u6dfb\u52a0 test_topic \u7684\u8bb0\u5f55"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-move-partiton/#32-data1kafka-logs-test_topic","text":"\u8fdb\u5165 /data1/kafka-logs \u76ee\u5f55\uff0c\u5c06\u5bf9\u5e94\u7684\u6587\u4ef6\u4e2d test_topic \u7684\u8bb0\u5f55\u53bb\u9664\uff0c\u5e76\u51cf\u5c11\u8bb0\u5f55\u6570\uff0c\u6587\u4ef6\u5185\u5bb9\u4fee\u6539\u5982\u4e0b\uff1a recovery-point-offset-checkpoint 0 101 ... ... replication-offset-checkpoint 0 101 ... ... \u8fd9\u91cc\u7684\u793a\u4f8b\u662f\u540c\u4e00\u8282\u70b9\u4e0d\u540c\u78c1\u76d8\u4e4b\u95f4\u79fb\u52a8\u5206\u533a\uff0c\u5982\u679c\u662f\u4e0d\u540c\u8282\u70b9\u4e4b\u95f4\u6062\u590d\u6570\u636e\uff0c\u8fd9\u91cc\u7684\u8bb0\u5f55\u4e0d\u7528\u53bb\u9664","title":"3.2 \u5728 /data1/kafka-logs \u5bf9\u5e94\u6587\u4ef6\u4e0b\u53bb\u9664 test_topic \u7684\u8bb0\u5f55"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-move-partiton/#4","text":"","title":"4. \u542f\u52a8\u8282\u70b9\u670d\u52a1"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-proxy/","text":"kafka \u5916\u7f51 nginx \u4ee3\u7406\u8bbf\u95ee\u96c6\u7fa4 \u8fdb\u884c\u751f\u4ea7\u6216\u8005\u6d88\u8d39\u6d3b\u52a8\u65f6\uff0ckafka \u5ba2\u6237\u7aef\u4f1a\u4e3b\u52a8\u83b7\u53d6\u96c6\u7fa4\u7684\u5143\u4fe1\u606f\uff0c\u5143\u4fe1\u606f\u5305\u542b broker id \u4e0e broker \u5730\u5740\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u4ee5\u53ca topic \u7684 partition, replica, leader \u4fe1\u606f\u3002\u5f53\u5177\u4f53\u8bfb/\u5199\u67d0\u4e2a topic \u7684\u67d0\u4e2a partition \u65f6\uff0c\u5ba2\u6237\u7aef\u5fc5\u987b\u6839\u636e\u5143\u4fe1\u606f\u627e\u5230\u4ee3\u8868\u8be5 partition leader \u7684 broker id\uff0c\u518d\u6839\u636e broker id \u627e\u5230 broker \u7684\u5730\u5740\u3002 \u914d\u7f6e kafka \u8f6c\u53d1\u5e38\u89c1\u7684\u9519\u8bef\u5c31\u662f\u5ffd\u7565\u4e86\u5ba2\u6237\u7aef\u4f1a\u4e3b\u52a8\u83b7\u53d6\u96c6\u7fa4\u5730\u5740\u7684\u7279\u6027\uff0c\u4ec5\u4ec5\u7528\u5916\u7f51 IP \u4ee3\u7406\u5185\u7f51\u4e0b\u7684 Kafka broker IP\uff0c\u8fd9\u6837\u5ba2\u6237\u7aef\u5728\u521d\u6b21\u8fde\u63a5\u65f6\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u662f\u7b2c\u4e00\u6b21\u8fde\u63a5\u6210\u529f\u540e\uff0c\u5ba2\u6237\u7aef\u4e3b\u52a8\u83b7\u53d6\u5230\u7684\u96c6\u7fa4 broker \u5730\u5740\u8fd8\u662f kafka listeners \u914d\u7f6e\u7684\u5185\u7f51\u5730\u5740\uff0c\u56e0\u6b64\u4e4b\u540e\u7684\u4efb\u4f55\u8bf7\u6c42\u90fd\u4f1a\u53d1\u5411\u5185\u7f51\u5730\u5740\u800c\u4e0d\u662f\u4ee3\u7406\u5730\u5740\u3002 \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\u662f\u8ba9\u5ba2\u6237\u7aef\u521d\u6b21\u8fde\u63a5\u6210\u529f\u540e\uff0c\u4e3b\u52a8\u83b7\u53d6\u5230\u7684\u96c6\u7fa4 broker \u5730\u5740\u8fd8\u662f\u6307\u5411\u4ee3\u7406 IP\uff0c\u6709 2 \u79cd\u89e3\u51b3\u65b9\u6cd5\uff1a \u4fee\u6539 kafka listeners \u7684\u5730\u5740\u4e3a kafka broker \u8282\u70b9\u7684 hostname\uff0c\u7136\u540e\u5728\u5ba2\u6237\u7aef\u6240\u5728\u7684\u4e3b\u673a\u914d\u7f6e /etc/hosts \u6587\u4ef6\uff0c\u6dfb\u52a0 kafka listeners \u914d\u7f6e\u7684 hostname\uff0c\u5e76\u5c06\u5bf9\u5e94\u7684 IP \u914d\u7f6e\u4e3a\u4ee3\u7406 IP \u4fee\u6539 kafka advertised.listeners \u7684\u5730\u5740\u4e3a\u4ee3\u7406 IP\uff0c\u7b49\u4e8e\u76f4\u63a5\u5411\u5ba2\u6237\u7aef\u5ba3\u544a\u901a\u8fc7\u4ee3\u7406\u5730\u5740\u8bbf\u95ee\u81ea\u5df1 kafka broker \u6ce8\u518c\u7684\u5730\u5740\u53ef\u4ee5\u5728 zookeeper \u7684 /brokers/ids/<broker_id> \u8def\u5f84\u4e0b\u67e5\u770b\u3002 \u51c6\u5907\u4fe1\u606f kafka \u96c6\u7fa4\u5404\u8282\u70b9\u7684\u5185\u7f51 ip \u548c hostname \u7684\u5bf9\u5e94\u4fe1\u606f 10.13.8.59 kafka1 10.13.76.7 kafka2 10.13.79.81 kafka3 nginx \u4ee3\u7406\u6240\u5728\u673a\u5668 \u5185\u7f51ip\uff1a10.13.9.72 \u5916\u7f51ip\uff1a106.75.143.227 \u65b9\u6cd51\uff1a\u5229\u7528 hosts \u6587\u4ef6 \u914d\u7f6e kafka broker \u76d1\u542c\u5730\u5740/\u7aef\u53e3 \u4fee\u6539\u6bcf\u4e2a kafka broker \u7684\u914d\u7f6e\u6587\u4ef6 server.properties \uff0c\u5c06\u76d1\u542c\u5730\u5740\u6539\u4e3a\u8be5\u8282\u70b9\u7684 hostname\uff0c\u4f8b\u5982 kafka1 \u4e0a\u914d\u7f6e\uff1a listeners=PLAINTEXT://kafka1:9092 #advertised.listeners=PLAINTEXT://kafka1:9092 \u8ba9\u6bcf\u4e2a broker \u6ce8\u518c\u5230 zookeeper \u7684\u76d1\u542c\u5730\u5740\u4e3a\u5f53\u524d\u8282\u70b9\u7684 hostname\uff0c\u5e76\u4fee\u6539\u7aef\u53e3\uff0c\u8ba9\u6bcf\u4e2a broker \u4f7f\u7528\u4e0d\u540c\u7aef\u53e3\uff08\u4e4b\u540e\u4f1a\u7528\u540c\u4e00\u4e2a\u4e3b\u673a\u7684 nginx \u4ee3\u7406\u6240\u6709 kafka broker\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528\u7aef\u53e3\u8fdb\u884c\u533a\u5206\uff0c\u5982\u679c\u53ef\u4ee5\u505a\u5230 nginx \u4ee3\u7406\u673a\u5668\u548c kafka broker \u6570\u91cf\u4e00\u81f4\uff0c\u5219\u4e0d\u9700\u8981\u4fee\u6539\u9ed8\u8ba4\u7aef\u53e3\uff09 \u914d\u7f6e nginx \u4ee3\u7406 \u7f16\u8f91 /etc/nginx/nginx.conf \uff0c\u589e\u52a0 stream \u914d\u7f6e $ vim /etc/nginx/nginx.conf stream { log_format proxy '$remote_addr [$time_local] ' '$protocol $status $bytes_sent $bytes_received ' '$session_time \"$upstream_addr\" ' '\"$upstream_bytes_sent\" \"$upstream_bytes_received\" \"$upstream_connect_time\"'; access_log /var/log/nginx/tcp-access.log proxy; open_log_file_cache off; # \u7edf\u4e00\u653e\u7f6e\uff0c\u65b9\u4fbf\u7ba1\u7406 include /etc/nginx/tcpConf.d/*.conf; } \u4e0b\u8f7d nginx.conf \u521b\u5efa /etc/nginx/tcpConf.d/ \u76ee\u5f55 $ mkdir -p /etc/nginx/tcpConf.d/ \u7f16\u8f91 /etc/nginx/tcpConf.d/kafka.conf \u914d\u7f6e\u6587\u4ef6 $ vim /etc/nginx/tcpConf.d/kafka.conf upstream tcp9092 { server 10.13.8.59:9092; } upstream tcp9093 { server 10.13.76.7:9093; } upstream tcp9094 { server 10.13.79.81:9094; } server { listen 9092; proxy_connect_timeout 8s; proxy_timeout 24h; proxy_pass tcp9092; } server { listen 9093; proxy_connect_timeout 8s; proxy_timeout 24h; proxy_pass tcp9093; } server { listen 9094; proxy_connect_timeout 8s; proxy_timeout 24h; proxy_pass tcp9094; } \u4e0b\u8f7d kafka.conf \u6d4b\u8bd5 nginx \u914d\u7f6e\uff1a $ nginx -t \u5982\u679c\u6ca1\u6709\u9519\u8bef\uff0c\u5e94\u7528 nginx \u914d\u7f6e\uff1a $ nginx -s reload \u8fd9\u91cc nginx \u4ee3\u7406\u4f1a\u5c06\u672c\u5730 9092\uff0c9093\uff0c9094 \u7aef\u53e3\u7684\u8bf7\u6c42\u8f6c\u53d1\u5230\u5bf9\u5e94\u7684 kafka broker \u4e0a \u914d\u7f6e\u5ba2\u6237\u7aef\u673a\u5668 \u4fee\u6539\u5ba2\u6237\u7aef hosts \u6587\u4ef6\uff08106.75.143.227 \u4e3a nginx \u6240\u5728\u673a\u5668\u5916\u7f51ip\uff09\uff1a 106.75.143.227 kafka1 106.75.143.227 kafka2 106.75.143.227 kafka3 \u65b9\u6cd52\uff1a\u5229\u7528 advertised.listeners \u914d\u7f6e \u914d\u7f6e kafka broker \u76d1\u542c\u5730\u5740/\u7aef\u53e3 \u4fee\u6539\u6bcf\u4e2a kafka broker \u7684\u914d\u7f6e\u6587\u4ef6 server.properties listeners = BROKER_DATA://:9090,BROKER_CONTROL://:9091,EXT_CLIENT://:9092 advertised.listeners = BROKER_DATA://kafka1:9090,BROKER_CONTROL://kafka1:9091,EXT_CLIENT://106.75.143.227:9092 listener.security.protocol.map = BROKER_DATA:PLAINTEXT,BROKER_CONTROL:PLAINTEXT,EXT_CLIENT:PLAINTEXT # broker data \u5185\u90e8\u4ea4\u4e92 inter.broker.listener.name = BROKER_DATA # broker control \u5185\u90e8\u4ea4\u4e92 control.plane.listener.name = BROKER_CONTROL \u8fd9\u91cc\u6bcf\u4e2a broker \u5f00\u653e\u4e86 3 \u4e2a\u76d1\u542c\u7aef\u53e3\uff0c\u4ee5 kafka1 \u8282\u70b9\u4e3a\u4f8b\uff1a BROKER_DATA: 9090 \u7528\u4e8e broker \u5185\u90e8\u6570\u636e\u4ea4\u4e92\uff0c\u6ce8\u518c\u5730\u5740\u662f kafka1:9090 \uff0c kafka1 \u4e5f\u53ef\u4ee5\u7528 kafka1 \u8282\u70b9\u7684\u5185\u7f51 ip BROKER_CONTROL: 9091 \u7528\u4e8e controller \u8bf7\u6c42\uff0c\u6ce8\u518c\u5730\u5740\u662f kafka1:9091 \uff0c kafka1 \u4e5f\u53ef\u4ee5\u7528 kafka1 \u8282\u70b9\u7684\u5185\u7f51 ip EXT_CLIENT: 9092 \u7528\u4e8e\u5916\u7f51\u5ba2\u6237\u7aef\u8bf7\u6c42\uff0c\u6ce8\u518c\u5730\u5740\u662f 106.75.143.227:9092 \uff0c\u8fd9\u91cc\u76f4\u63a5\u6ce8\u518c\u4ee3\u7406\u5730\u5740\u3002\u540c\u6837\u5730\uff0c\u4e4b\u540e\u4f1a\u7528\u540c\u4e00\u4e2a\u4e3b\u673a\u7684 nginx \u4ee3\u7406\u6240\u6709 kafka broker\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528\u7aef\u53e3\u533a\u5206\u4e0d\u540c broker\uff0c\u6bcf\u4e2a broker EXT_CLIENT \u914d\u7f6e\u7684\u7aef\u53e3\u9700\u8981\u4e0d\u540c\uff0c\u5982\u679c\u53ef\u4ee5\u505a\u5230 nginx \u4ee3\u7406\u673a\u5668\u548c kafka broker \u6570\u91cf\u4e00\u81f4\uff0c\u5219 EXT_CLIENT \u7aef\u53e3\u53ef\u4ee5\u548c\u5176\u4ed6 broker \u76f8\u540c\u3002 \u914d\u7f6e nginx \u4ee3\u7406 \u4e0e\u65b9\u6cd5 1 \u7684 nginx \u914d\u7f6e\u76f8\u540c\u3002 \u914d\u7f6e\u5ba2\u6237\u7aef\u673a\u5668 \u4e0d\u9700\u8981\u8fdb\u884c\u989d\u5916\u914d\u7f6e\u3002","title":"2.2 \u8f6c\u53d1\u670d\u52a1"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-proxy/#kafka-nginx","text":"\u8fdb\u884c\u751f\u4ea7\u6216\u8005\u6d88\u8d39\u6d3b\u52a8\u65f6\uff0ckafka \u5ba2\u6237\u7aef\u4f1a\u4e3b\u52a8\u83b7\u53d6\u96c6\u7fa4\u7684\u5143\u4fe1\u606f\uff0c\u5143\u4fe1\u606f\u5305\u542b broker id \u4e0e broker \u5730\u5740\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u4ee5\u53ca topic \u7684 partition, replica, leader \u4fe1\u606f\u3002\u5f53\u5177\u4f53\u8bfb/\u5199\u67d0\u4e2a topic \u7684\u67d0\u4e2a partition \u65f6\uff0c\u5ba2\u6237\u7aef\u5fc5\u987b\u6839\u636e\u5143\u4fe1\u606f\u627e\u5230\u4ee3\u8868\u8be5 partition leader \u7684 broker id\uff0c\u518d\u6839\u636e broker id \u627e\u5230 broker \u7684\u5730\u5740\u3002 \u914d\u7f6e kafka \u8f6c\u53d1\u5e38\u89c1\u7684\u9519\u8bef\u5c31\u662f\u5ffd\u7565\u4e86\u5ba2\u6237\u7aef\u4f1a\u4e3b\u52a8\u83b7\u53d6\u96c6\u7fa4\u5730\u5740\u7684\u7279\u6027\uff0c\u4ec5\u4ec5\u7528\u5916\u7f51 IP \u4ee3\u7406\u5185\u7f51\u4e0b\u7684 Kafka broker IP\uff0c\u8fd9\u6837\u5ba2\u6237\u7aef\u5728\u521d\u6b21\u8fde\u63a5\u65f6\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u662f\u7b2c\u4e00\u6b21\u8fde\u63a5\u6210\u529f\u540e\uff0c\u5ba2\u6237\u7aef\u4e3b\u52a8\u83b7\u53d6\u5230\u7684\u96c6\u7fa4 broker \u5730\u5740\u8fd8\u662f kafka listeners \u914d\u7f6e\u7684\u5185\u7f51\u5730\u5740\uff0c\u56e0\u6b64\u4e4b\u540e\u7684\u4efb\u4f55\u8bf7\u6c42\u90fd\u4f1a\u53d1\u5411\u5185\u7f51\u5730\u5740\u800c\u4e0d\u662f\u4ee3\u7406\u5730\u5740\u3002 \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\u662f\u8ba9\u5ba2\u6237\u7aef\u521d\u6b21\u8fde\u63a5\u6210\u529f\u540e\uff0c\u4e3b\u52a8\u83b7\u53d6\u5230\u7684\u96c6\u7fa4 broker \u5730\u5740\u8fd8\u662f\u6307\u5411\u4ee3\u7406 IP\uff0c\u6709 2 \u79cd\u89e3\u51b3\u65b9\u6cd5\uff1a \u4fee\u6539 kafka listeners \u7684\u5730\u5740\u4e3a kafka broker \u8282\u70b9\u7684 hostname\uff0c\u7136\u540e\u5728\u5ba2\u6237\u7aef\u6240\u5728\u7684\u4e3b\u673a\u914d\u7f6e /etc/hosts \u6587\u4ef6\uff0c\u6dfb\u52a0 kafka listeners \u914d\u7f6e\u7684 hostname\uff0c\u5e76\u5c06\u5bf9\u5e94\u7684 IP \u914d\u7f6e\u4e3a\u4ee3\u7406 IP \u4fee\u6539 kafka advertised.listeners \u7684\u5730\u5740\u4e3a\u4ee3\u7406 IP\uff0c\u7b49\u4e8e\u76f4\u63a5\u5411\u5ba2\u6237\u7aef\u5ba3\u544a\u901a\u8fc7\u4ee3\u7406\u5730\u5740\u8bbf\u95ee\u81ea\u5df1 kafka broker \u6ce8\u518c\u7684\u5730\u5740\u53ef\u4ee5\u5728 zookeeper \u7684 /brokers/ids/<broker_id> \u8def\u5f84\u4e0b\u67e5\u770b\u3002","title":"kafka \u5916\u7f51 nginx \u4ee3\u7406\u8bbf\u95ee\u96c6\u7fa4"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-proxy/#_1","text":"kafka \u96c6\u7fa4\u5404\u8282\u70b9\u7684\u5185\u7f51 ip \u548c hostname \u7684\u5bf9\u5e94\u4fe1\u606f 10.13.8.59 kafka1 10.13.76.7 kafka2 10.13.79.81 kafka3 nginx \u4ee3\u7406\u6240\u5728\u673a\u5668 \u5185\u7f51ip\uff1a10.13.9.72 \u5916\u7f51ip\uff1a106.75.143.227","title":"\u51c6\u5907\u4fe1\u606f"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-proxy/#1-hosts","text":"","title":"\u65b9\u6cd51\uff1a\u5229\u7528 hosts \u6587\u4ef6"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-proxy/#kafka-broker","text":"\u4fee\u6539\u6bcf\u4e2a kafka broker \u7684\u914d\u7f6e\u6587\u4ef6 server.properties \uff0c\u5c06\u76d1\u542c\u5730\u5740\u6539\u4e3a\u8be5\u8282\u70b9\u7684 hostname\uff0c\u4f8b\u5982 kafka1 \u4e0a\u914d\u7f6e\uff1a listeners=PLAINTEXT://kafka1:9092 #advertised.listeners=PLAINTEXT://kafka1:9092 \u8ba9\u6bcf\u4e2a broker \u6ce8\u518c\u5230 zookeeper \u7684\u76d1\u542c\u5730\u5740\u4e3a\u5f53\u524d\u8282\u70b9\u7684 hostname\uff0c\u5e76\u4fee\u6539\u7aef\u53e3\uff0c\u8ba9\u6bcf\u4e2a broker \u4f7f\u7528\u4e0d\u540c\u7aef\u53e3\uff08\u4e4b\u540e\u4f1a\u7528\u540c\u4e00\u4e2a\u4e3b\u673a\u7684 nginx \u4ee3\u7406\u6240\u6709 kafka broker\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528\u7aef\u53e3\u8fdb\u884c\u533a\u5206\uff0c\u5982\u679c\u53ef\u4ee5\u505a\u5230 nginx \u4ee3\u7406\u673a\u5668\u548c kafka broker \u6570\u91cf\u4e00\u81f4\uff0c\u5219\u4e0d\u9700\u8981\u4fee\u6539\u9ed8\u8ba4\u7aef\u53e3\uff09","title":"\u914d\u7f6e kafka broker \u76d1\u542c\u5730\u5740/\u7aef\u53e3"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-proxy/#nginx","text":"\u7f16\u8f91 /etc/nginx/nginx.conf \uff0c\u589e\u52a0 stream \u914d\u7f6e $ vim /etc/nginx/nginx.conf stream { log_format proxy '$remote_addr [$time_local] ' '$protocol $status $bytes_sent $bytes_received ' '$session_time \"$upstream_addr\" ' '\"$upstream_bytes_sent\" \"$upstream_bytes_received\" \"$upstream_connect_time\"'; access_log /var/log/nginx/tcp-access.log proxy; open_log_file_cache off; # \u7edf\u4e00\u653e\u7f6e\uff0c\u65b9\u4fbf\u7ba1\u7406 include /etc/nginx/tcpConf.d/*.conf; } \u4e0b\u8f7d nginx.conf \u521b\u5efa /etc/nginx/tcpConf.d/ \u76ee\u5f55 $ mkdir -p /etc/nginx/tcpConf.d/ \u7f16\u8f91 /etc/nginx/tcpConf.d/kafka.conf \u914d\u7f6e\u6587\u4ef6 $ vim /etc/nginx/tcpConf.d/kafka.conf upstream tcp9092 { server 10.13.8.59:9092; } upstream tcp9093 { server 10.13.76.7:9093; } upstream tcp9094 { server 10.13.79.81:9094; } server { listen 9092; proxy_connect_timeout 8s; proxy_timeout 24h; proxy_pass tcp9092; } server { listen 9093; proxy_connect_timeout 8s; proxy_timeout 24h; proxy_pass tcp9093; } server { listen 9094; proxy_connect_timeout 8s; proxy_timeout 24h; proxy_pass tcp9094; } \u4e0b\u8f7d kafka.conf \u6d4b\u8bd5 nginx \u914d\u7f6e\uff1a $ nginx -t \u5982\u679c\u6ca1\u6709\u9519\u8bef\uff0c\u5e94\u7528 nginx \u914d\u7f6e\uff1a $ nginx -s reload \u8fd9\u91cc nginx \u4ee3\u7406\u4f1a\u5c06\u672c\u5730 9092\uff0c9093\uff0c9094 \u7aef\u53e3\u7684\u8bf7\u6c42\u8f6c\u53d1\u5230\u5bf9\u5e94\u7684 kafka broker \u4e0a","title":"\u914d\u7f6e nginx \u4ee3\u7406"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-proxy/#_2","text":"\u4fee\u6539\u5ba2\u6237\u7aef hosts \u6587\u4ef6\uff08106.75.143.227 \u4e3a nginx \u6240\u5728\u673a\u5668\u5916\u7f51ip\uff09\uff1a 106.75.143.227 kafka1 106.75.143.227 kafka2 106.75.143.227 kafka3","title":"\u914d\u7f6e\u5ba2\u6237\u7aef\u673a\u5668"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-proxy/#2-advertisedlisteners","text":"","title":"\u65b9\u6cd52\uff1a\u5229\u7528 advertised.listeners \u914d\u7f6e"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-proxy/#kafka-broker_1","text":"\u4fee\u6539\u6bcf\u4e2a kafka broker \u7684\u914d\u7f6e\u6587\u4ef6 server.properties listeners = BROKER_DATA://:9090,BROKER_CONTROL://:9091,EXT_CLIENT://:9092 advertised.listeners = BROKER_DATA://kafka1:9090,BROKER_CONTROL://kafka1:9091,EXT_CLIENT://106.75.143.227:9092 listener.security.protocol.map = BROKER_DATA:PLAINTEXT,BROKER_CONTROL:PLAINTEXT,EXT_CLIENT:PLAINTEXT # broker data \u5185\u90e8\u4ea4\u4e92 inter.broker.listener.name = BROKER_DATA # broker control \u5185\u90e8\u4ea4\u4e92 control.plane.listener.name = BROKER_CONTROL \u8fd9\u91cc\u6bcf\u4e2a broker \u5f00\u653e\u4e86 3 \u4e2a\u76d1\u542c\u7aef\u53e3\uff0c\u4ee5 kafka1 \u8282\u70b9\u4e3a\u4f8b\uff1a BROKER_DATA: 9090 \u7528\u4e8e broker \u5185\u90e8\u6570\u636e\u4ea4\u4e92\uff0c\u6ce8\u518c\u5730\u5740\u662f kafka1:9090 \uff0c kafka1 \u4e5f\u53ef\u4ee5\u7528 kafka1 \u8282\u70b9\u7684\u5185\u7f51 ip BROKER_CONTROL: 9091 \u7528\u4e8e controller \u8bf7\u6c42\uff0c\u6ce8\u518c\u5730\u5740\u662f kafka1:9091 \uff0c kafka1 \u4e5f\u53ef\u4ee5\u7528 kafka1 \u8282\u70b9\u7684\u5185\u7f51 ip EXT_CLIENT: 9092 \u7528\u4e8e\u5916\u7f51\u5ba2\u6237\u7aef\u8bf7\u6c42\uff0c\u6ce8\u518c\u5730\u5740\u662f 106.75.143.227:9092 \uff0c\u8fd9\u91cc\u76f4\u63a5\u6ce8\u518c\u4ee3\u7406\u5730\u5740\u3002\u540c\u6837\u5730\uff0c\u4e4b\u540e\u4f1a\u7528\u540c\u4e00\u4e2a\u4e3b\u673a\u7684 nginx \u4ee3\u7406\u6240\u6709 kafka broker\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528\u7aef\u53e3\u533a\u5206\u4e0d\u540c broker\uff0c\u6bcf\u4e2a broker EXT_CLIENT \u914d\u7f6e\u7684\u7aef\u53e3\u9700\u8981\u4e0d\u540c\uff0c\u5982\u679c\u53ef\u4ee5\u505a\u5230 nginx \u4ee3\u7406\u673a\u5668\u548c kafka broker \u6570\u91cf\u4e00\u81f4\uff0c\u5219 EXT_CLIENT \u7aef\u53e3\u53ef\u4ee5\u548c\u5176\u4ed6 broker \u76f8\u540c\u3002","title":"\u914d\u7f6e kafka broker \u76d1\u542c\u5730\u5740/\u7aef\u53e3"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-proxy/#nginx_1","text":"\u4e0e\u65b9\u6cd5 1 \u7684 nginx \u914d\u7f6e\u76f8\u540c\u3002","title":"\u914d\u7f6e nginx \u4ee3\u7406"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-proxy/#_3","text":"\u4e0d\u9700\u8981\u8fdb\u884c\u989d\u5916\u914d\u7f6e\u3002","title":"\u914d\u7f6e\u5ba2\u6237\u7aef\u673a\u5668"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-upgrade/","text":"kafka \u6eda\u52a8\u5347\u7ea7 kafka \u6eda\u52a8\u5347\u7ea7\u53c2\u8003 \u5b98\u65b9\u6587\u6863 \uff0c\u5347\u7ea7\u8fc7\u7a0b\u4e2d\u9700\u8981\u8fdb\u884c\u4e24\u6b21\u6eda\u52a8\u91cd\u542f\u8282\u70b9\u64cd\u4f5c\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u5347\u7ea7\u8fc7\u7a0b\u4e2d\u96c6\u7fa4\u670d\u52a1\u4e0d\u4e2d\u65ad\u3002 \u4e0b\u9762\u4ee5 0.9.0.X \u5347\u7ea7\u5230 1.1.1 \u4e3a\u4f8b\uff0c\u5047\u8bbe kafka \u5b89\u88c5\u5728 /usr/local/kafka \u4e0b\uff0c\u5e76\u7528 systemd \u7ba1\u7406\uff1a \u7b2c\u4e00\u6b65 \u9700\u8981\u4f9d\u6b21\u66ff\u6362\u8282\u70b9 kafka \u5230 1.1.1 \u7248\u672c\uff0c\u66ff\u6362\u8fc7\u7a0b\u4e2d\u4fdd\u7559\u8282\u70b9\u539f\u6709 kafka \u914d\u7f6e\uff0c\u5e76\u65b0\u589e\u914d\u7f6e\u6307\u5b9a inter.broker.protocol.version=0.9.0.X \uff0c log.message.format.version=0.9.0.X \u4e0e\u73b0\u6709\u96c6\u7fa4\u7248\u672c\u517c\u5bb9\uff0c\u5177\u4f53\u64cd\u4f5c\u6b65\u9aa4\u5982\u4e0b\uff1a # \u4e0b\u8f7d 1.1.1 \u7248\u672c kafka wget https://archive.apache.org/dist/kafka/1.1.1/kafka_2.12-1.1.1.tgz -O /tmp/kafka_2.12-1.1.1.tgz wget https://archive.apache.org/dist/kafka/1.1.1/kafka_2.12-1.1.1.tgz.sha512 -O /tmp/kafka_2.12-1.1.1.tgz.sha512 # \u6821\u9a8c kafka \u5305 # cd /tmp # [[ `md5sum kafka_1.1.1.tar.gz` == `cat kafka_1.1.1.md` ]] && echo 'ok' || echo 'no' # [[ `shasum -a512 kafka_2.12-1.1.1.tgz` == `cat kafka_2.12-1.1.1.tgz.sha512` ]] && echo 'ok' || echo 'no' # [[ `openssl sha512 kafka_2.12-1.1.1.tgz` == `cat kafka_2.12-1.1.1.tgz.sha512` ]] && echo 'ok' || echo 'no' # \u6821\u9a8c\u6210\u529f\u540e\u89e3\u538b kafka \u5305 tar -zxvf /tmp/kafka_2.12-1.1.1.tgz -C /tmp # \u4fdd\u7559\u539f\u6709\u914d\u7f6e mv /tmp/kafka/config /tmp/kafka/config.back cp -r /usr/local/kafka/config /tmp/kafka/ # \u6307\u5b9a\u901a\u4fe1\u534f\u8bae\u4e0e\u6d88\u606f\u683c\u5f0f echo inter.broker.protocol.version = 0 .9.0.X >> /tmp/kafka/config/server.properties echo log.message.format.version = 0 .9.0.X >> /tmp/kafka/config/server.properties # \u66ff\u6362 kafka \u5305 mv /usr/local/kafka /usr/local/kafka.back cp -r /tmp/kafka /usr/local/ # \u91cd\u542f kafka \u8282\u70b9 # service kafka-server restart systemctl restart kafka \u7b2c\u4e8c\u6b65 Kafka \u7248\u672c\u5347\u7ea7\u6709\u901a\u4fe1\u534f\u8bae\u548c\u6d88\u606f\u683c\u5f0f\u7684\u53d8\u5316\uff0c\u7ecf\u8fc7\u4e0a\u4e00\u6b65\u7684\u66ff\u6362\uff0c\u96c6\u7fa4\u4e0a\u7684 kafka \u5305\u5df2\u7ecf\u66ff\u6362\u6210 1.1.1 \u7248\u672c\uff0c\u901a\u4fe1\u534f\u8bae\u548c\u6d88\u606f\u683c\u5f0f\u4ecd\u7136\u6307\u5b9a\u4e3a 0.9.0.X \u7248\u672c\uff0c\u4e4b\u540e\u9700\u8981\u5bf9\u8fd9\u4e24\u9879\u914d\u7f6e\u8fdb\u884c\u66f4\u65b0\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u4e24\u70b9\uff1a \u66f4\u6539 log.message.format.version \u4e4b\u524d\uff0c\u6240\u6709\u6d88\u8d39\u8005\u5fc5\u987b\u5347\u7ea7\u5230\u652f\u6301 1.1.1 \u6216\u8005\u4e4b\u540e\u7684\u7248\u672c inter.broker.protocol.version , log.message.format.version \u66f4\u6539\u5e76\u91cd\u542f\u751f\u6548\u4e4b\u540e\uff0ckafka \u7248\u672c\u4e0d\u80fd\u8fdb\u884c\u964d\u7ea7\u56de\u9000 \u64cd\u4f5c\u6b65\u9aa4\uff1a # \u6307\u5b9a\u901a\u4fe1\u534f\u8bae\u4e0e\u6d88\u606f\u683c\u5f0f sed -i \"s/inter.broker.protocol.version=0.9.0.X/inter.broker.protocol.version=1.1-IV0/g\" /usr/local/kafka/config/server.properties sed -i \"s/log.message.format.version=0.9.0.X/log.message.format.version=1.1-IV0/g\" /usr/local/kafka/config/server.properties # \u91cd\u542f kafka \u8282\u70b9 # service kafka-server restart systemctl restart kafka \u6ce8\u610f\u4e8b\u9879 0.10.0.0 \u4e4b\u540e\u6d88\u606f\u683c\u5f0f\u6539\u53d8\uff0c\u5982\u679c\u5ba2\u6237\u7aef\u7248\u672c\u4f4e\u4e8e 0.10.0.0 \u4f1a\u5e26\u6765\u6027\u80fd\u635f\u5931","title":"2.1 \u7248\u672c\u5347\u7ea7"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-upgrade/#kafka","text":"kafka \u6eda\u52a8\u5347\u7ea7\u53c2\u8003 \u5b98\u65b9\u6587\u6863 \uff0c\u5347\u7ea7\u8fc7\u7a0b\u4e2d\u9700\u8981\u8fdb\u884c\u4e24\u6b21\u6eda\u52a8\u91cd\u542f\u8282\u70b9\u64cd\u4f5c\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u5347\u7ea7\u8fc7\u7a0b\u4e2d\u96c6\u7fa4\u670d\u52a1\u4e0d\u4e2d\u65ad\u3002 \u4e0b\u9762\u4ee5 0.9.0.X \u5347\u7ea7\u5230 1.1.1 \u4e3a\u4f8b\uff0c\u5047\u8bbe kafka \u5b89\u88c5\u5728 /usr/local/kafka \u4e0b\uff0c\u5e76\u7528 systemd \u7ba1\u7406\uff1a","title":"kafka \u6eda\u52a8\u5347\u7ea7"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-upgrade/#_1","text":"\u9700\u8981\u4f9d\u6b21\u66ff\u6362\u8282\u70b9 kafka \u5230 1.1.1 \u7248\u672c\uff0c\u66ff\u6362\u8fc7\u7a0b\u4e2d\u4fdd\u7559\u8282\u70b9\u539f\u6709 kafka \u914d\u7f6e\uff0c\u5e76\u65b0\u589e\u914d\u7f6e\u6307\u5b9a inter.broker.protocol.version=0.9.0.X \uff0c log.message.format.version=0.9.0.X \u4e0e\u73b0\u6709\u96c6\u7fa4\u7248\u672c\u517c\u5bb9\uff0c\u5177\u4f53\u64cd\u4f5c\u6b65\u9aa4\u5982\u4e0b\uff1a # \u4e0b\u8f7d 1.1.1 \u7248\u672c kafka wget https://archive.apache.org/dist/kafka/1.1.1/kafka_2.12-1.1.1.tgz -O /tmp/kafka_2.12-1.1.1.tgz wget https://archive.apache.org/dist/kafka/1.1.1/kafka_2.12-1.1.1.tgz.sha512 -O /tmp/kafka_2.12-1.1.1.tgz.sha512 # \u6821\u9a8c kafka \u5305 # cd /tmp # [[ `md5sum kafka_1.1.1.tar.gz` == `cat kafka_1.1.1.md` ]] && echo 'ok' || echo 'no' # [[ `shasum -a512 kafka_2.12-1.1.1.tgz` == `cat kafka_2.12-1.1.1.tgz.sha512` ]] && echo 'ok' || echo 'no' # [[ `openssl sha512 kafka_2.12-1.1.1.tgz` == `cat kafka_2.12-1.1.1.tgz.sha512` ]] && echo 'ok' || echo 'no' # \u6821\u9a8c\u6210\u529f\u540e\u89e3\u538b kafka \u5305 tar -zxvf /tmp/kafka_2.12-1.1.1.tgz -C /tmp # \u4fdd\u7559\u539f\u6709\u914d\u7f6e mv /tmp/kafka/config /tmp/kafka/config.back cp -r /usr/local/kafka/config /tmp/kafka/ # \u6307\u5b9a\u901a\u4fe1\u534f\u8bae\u4e0e\u6d88\u606f\u683c\u5f0f echo inter.broker.protocol.version = 0 .9.0.X >> /tmp/kafka/config/server.properties echo log.message.format.version = 0 .9.0.X >> /tmp/kafka/config/server.properties # \u66ff\u6362 kafka \u5305 mv /usr/local/kafka /usr/local/kafka.back cp -r /tmp/kafka /usr/local/ # \u91cd\u542f kafka \u8282\u70b9 # service kafka-server restart systemctl restart kafka","title":"\u7b2c\u4e00\u6b65"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-upgrade/#_2","text":"Kafka \u7248\u672c\u5347\u7ea7\u6709\u901a\u4fe1\u534f\u8bae\u548c\u6d88\u606f\u683c\u5f0f\u7684\u53d8\u5316\uff0c\u7ecf\u8fc7\u4e0a\u4e00\u6b65\u7684\u66ff\u6362\uff0c\u96c6\u7fa4\u4e0a\u7684 kafka \u5305\u5df2\u7ecf\u66ff\u6362\u6210 1.1.1 \u7248\u672c\uff0c\u901a\u4fe1\u534f\u8bae\u548c\u6d88\u606f\u683c\u5f0f\u4ecd\u7136\u6307\u5b9a\u4e3a 0.9.0.X \u7248\u672c\uff0c\u4e4b\u540e\u9700\u8981\u5bf9\u8fd9\u4e24\u9879\u914d\u7f6e\u8fdb\u884c\u66f4\u65b0\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u4e24\u70b9\uff1a \u66f4\u6539 log.message.format.version \u4e4b\u524d\uff0c\u6240\u6709\u6d88\u8d39\u8005\u5fc5\u987b\u5347\u7ea7\u5230\u652f\u6301 1.1.1 \u6216\u8005\u4e4b\u540e\u7684\u7248\u672c inter.broker.protocol.version , log.message.format.version \u66f4\u6539\u5e76\u91cd\u542f\u751f\u6548\u4e4b\u540e\uff0ckafka \u7248\u672c\u4e0d\u80fd\u8fdb\u884c\u964d\u7ea7\u56de\u9000 \u64cd\u4f5c\u6b65\u9aa4\uff1a # \u6307\u5b9a\u901a\u4fe1\u534f\u8bae\u4e0e\u6d88\u606f\u683c\u5f0f sed -i \"s/inter.broker.protocol.version=0.9.0.X/inter.broker.protocol.version=1.1-IV0/g\" /usr/local/kafka/config/server.properties sed -i \"s/log.message.format.version=0.9.0.X/log.message.format.version=1.1-IV0/g\" /usr/local/kafka/config/server.properties # \u91cd\u542f kafka \u8282\u70b9 # service kafka-server restart systemctl restart kafka","title":"\u7b2c\u4e8c\u6b65"},{"location":"2-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C/kafka-upgrade/#_3","text":"0.10.0.0 \u4e4b\u540e\u6d88\u606f\u683c\u5f0f\u6539\u53d8\uff0c\u5982\u679c\u5ba2\u6237\u7aef\u7248\u672c\u4f4e\u4e8e 0.10.0.0 \u4f1a\u5e26\u6765\u6027\u80fd\u635f\u5931","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/","text":"kafka \u5e38\u7528\u914d\u7f6e\u53c2\u6570","title":"3. \u5e38\u7528\u914d\u7f6e"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/#kafka","text":"","title":"kafka \u5e38\u7528\u914d\u7f6e\u53c2\u6570"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/0-os-config/","text":"OS \u6587\u4ef6\u63cf\u8ff0\u7b26\u9650\u5236 vm.max_map_count \u53d6\u4fdd\u6709\u8db3\u591f\u7684\u865a\u62df\u5185\u5b58\u53ef\u7528\u4e8e mmap ped \u6587\u4ef6 sysctl -w vm.max_map_count=262144 \u5728 /etc/sysctl.conf \u901a\u8fc7\u4fee\u6539 vm.max_map_count \u6c38\u4e45\u8bbe\u7f6e","title":"3.0 os config"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/0-os-config/#os","text":"","title":"OS"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/0-os-config/#_1","text":"","title":"\u6587\u4ef6\u63cf\u8ff0\u7b26\u9650\u5236"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/0-os-config/#vmmax_map_count","text":"\u53d6\u4fdd\u6709\u8db3\u591f\u7684\u865a\u62df\u5185\u5b58\u53ef\u7528\u4e8e mmap ped \u6587\u4ef6 sysctl -w vm.max_map_count=262144 \u5728 /etc/sysctl.conf \u901a\u8fc7\u4fee\u6539 vm.max_map_count \u6c38\u4e45\u8bbe\u7f6e","title":"vm.max_map_count"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/1-jvm-config/","text":"JVM -Xmx6g -Xms6g \\ -XX:MetaspaceSize=96m \\ -XX:+UseG1GC \\ -XX:MaxGCPauseMillis=20 \\ -XX:InitiatingHeapOccupancyPercent=35 \\ -XX:G1HeapRegionSize=16M \\ -XX:MinMetaspaceFreeRatio=50 \\ -XX:MaxMetaspaceFreeRatio=80 \\ -XX:+ExplicitGCInvokesConcurrent \u4f7f\u7528 G1 \u5783\u573e\u56de\u6536\u5668 -XX:+UseG1GC \u5806\u5185\u5b58 kafka \u5e76\u4e0d\u9700\u8981\u8fc7\u9ad8\u7684\u5806\u5185\u5b58\uff0c\u4e00\u822c\u5806\u5185\u5b58\u7684\u5927\u5c0f\u4e0d\u9700\u8981\u8d85\u8fc7 6G\u3002 KAFKA_HEAP_OPTS='-Xmx6G -Xms6G' \u76f8\u53cd\uff0ckafka \u6027\u80fd\u4e0e\u6587\u4ef6\u8bfb\u5199\u6027\u80fd\u76f4\u63a5\u76f8\u5173\uff0c\u8fd9\u8981\u6c42\u64cd\u4f5c\u7cfb\u7edf\u4fdd\u7559\u8db3\u591f\u7684\u5185\u5b58\u4f5c\u4e3a page cache\uff0cjvm \u4f7f\u7528\u7684\u5185\u5b58\u8d8a\u5c11\uff0c\u64cd\u4f5c\u7cfb\u7edf\u53ef\u7528\u7684 page cache \u7a7a\u95f4\u8d8a\u5927\u3002 \u786e\u4fdd\u5806\u5185\u5b58\u6700\u5c0f\u503c\uff08 Xms \uff09\u4e0e\u6700\u5927\u503c\uff08 Xmx \uff09\u7684\u5927\u5c0f\u662f\u76f8\u540c\u7684\uff0c\u9632\u6b62\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u6539\u53d8\u5806\u5185\u5b58\u5927\u5c0f\uff0c \u8fd9\u662f\u4e00\u4e2a\u5f88\u8017\u7cfb\u7edf\u8d44\u6e90\u7684\u8fc7\u7a0b\u3002","title":"3.1 jvm config"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/1-jvm-config/#jvm","text":"-Xmx6g -Xms6g \\ -XX:MetaspaceSize=96m \\ -XX:+UseG1GC \\ -XX:MaxGCPauseMillis=20 \\ -XX:InitiatingHeapOccupancyPercent=35 \\ -XX:G1HeapRegionSize=16M \\ -XX:MinMetaspaceFreeRatio=50 \\ -XX:MaxMetaspaceFreeRatio=80 \\ -XX:+ExplicitGCInvokesConcurrent","title":"JVM"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/1-jvm-config/#g1","text":"-XX:+UseG1GC","title":"\u4f7f\u7528 G1 \u5783\u573e\u56de\u6536\u5668"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/1-jvm-config/#_1","text":"kafka \u5e76\u4e0d\u9700\u8981\u8fc7\u9ad8\u7684\u5806\u5185\u5b58\uff0c\u4e00\u822c\u5806\u5185\u5b58\u7684\u5927\u5c0f\u4e0d\u9700\u8981\u8d85\u8fc7 6G\u3002 KAFKA_HEAP_OPTS='-Xmx6G -Xms6G' \u76f8\u53cd\uff0ckafka \u6027\u80fd\u4e0e\u6587\u4ef6\u8bfb\u5199\u6027\u80fd\u76f4\u63a5\u76f8\u5173\uff0c\u8fd9\u8981\u6c42\u64cd\u4f5c\u7cfb\u7edf\u4fdd\u7559\u8db3\u591f\u7684\u5185\u5b58\u4f5c\u4e3a page cache\uff0cjvm \u4f7f\u7528\u7684\u5185\u5b58\u8d8a\u5c11\uff0c\u64cd\u4f5c\u7cfb\u7edf\u53ef\u7528\u7684 page cache \u7a7a\u95f4\u8d8a\u5927\u3002 \u786e\u4fdd\u5806\u5185\u5b58\u6700\u5c0f\u503c\uff08 Xms \uff09\u4e0e\u6700\u5927\u503c\uff08 Xmx \uff09\u7684\u5927\u5c0f\u662f\u76f8\u540c\u7684\uff0c\u9632\u6b62\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u6539\u53d8\u5806\u5185\u5b58\u5927\u5c0f\uff0c \u8fd9\u662f\u4e00\u4e2a\u5f88\u8017\u7cfb\u7edf\u8d44\u6e90\u7684\u8fc7\u7a0b\u3002","title":"\u5806\u5185\u5b58"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/2-broker-config/","text":"Broker \u53c2\u6570\u914d\u7f6e broker id and rack # integer \u7c7b\u578b\uff0c\u9ed8\u8ba4 -1\u3002 # \u624b\u52a8\u8bbe\u7f6e\u5e94\u8be5\u4ece 0 \u5f00\u59cb\uff0c\u6bcf\u4e2a broker \u4f9d\u6b21 +1\uff0c\u624b\u52a8\u8bbe\u7f6e\u7684\u503c\u4e0d\u80fd\u8d85\u8fc7 reserved.broker.max.id broker.id=0 # \u5982\u679c\u914d\u7f6e\u6587\u4ef6\u4e2d\u6ca1\u6709\u6307\u5b9a broker.id\uff0cbroker \u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2a broker.id\uff0c\u9ed8\u8ba4\u4ece reserved.broker.max.id+1 \u5f00\u59cb reserved.broker.max.id=1000 # string \u7c7b\u578b\uff0c\u9ed8\u8ba4 null\u3002 # topic partition \u7684 replica \u5206\u5e03\u5728\u4e0d\u540c\u7684 broker \u4e0a\uff0c\u4f46\u8fd9\u4e9b broker \u53ef\u80fd\u5728\u540c\u4e00\u4e2a\u673a\u67b6/\u673a\u623f/\u533a\u57df\u5185\uff0c # \u5982\u679c\u60f3\u8ba9 replica \u5728\u4e0d\u540c\u673a\u67b6/\u673a\u623f/\u533a\u57df\u5185\u5206\u5e03\uff0c\u53ef\u4ee5\u5c06\u4e0d\u540c\u673a\u67b6/\u673a\u623f/\u533a\u57df\u7684 broker \u914d\u7f6e\u4e0d\u540c\u7684 broker.rack\uff0c # \u914d\u7f6e\u540e\uff0ctopic partition \u7684 replica \u4f1a\u5206\u5e03\u5728\u4e0d\u540c\u7684 broker.rack broker.rack=null \u7f51\u7edc\u548c io \u64cd\u4f5c\u7ebf\u7a0b\u914d\u7f6e num.network.threads=9 broker\u5904\u7406\u6d88\u606f\u7684\u6700\u5927\u7ebf\u7a0b\u6570(\u4e3b\u8981\u5904\u7406\u7f51\u7edcio\uff0c\u8bfb\u5199\u7f13\u51b2\u533a\u6570\u636e\uff0c\u57fa\u672c\u6ca1\u6709io\u7b49\u5f85\uff0c\u914d\u7f6e\u7ebf\u7a0b\u6570\u91cf\u4e3acpu\u6838\u6570\u52a01) num.io.threads=16 broker\u5904\u7406\u78c1\u76d8IO\u7684\u7ebf\u7a0b\u6570(\u5904\u7406\u78c1\u76d8io\u64cd\u4f5c\uff0c\u9ad8\u5cf0\u671f\u53ef\u80fd\u6709\u4e9bio\u7b49\u5f85\uff0c\u56e0\u6b64\u914d\u7f6e\u9700\u8981\u5927\u4e9b\u3002\u914d\u7f6e\u7ebf\u7a0b\u6570\u91cf\u4e3acpu\u6838\u65702\u500d\uff0c\u6700\u5927\u4e0d\u8d85\u8fc73\u500d) socket.request.max.bytes=2147483600 socket server\u53ef\u63a5\u53d7\u6570\u636e\u5927\u5c0f(\u9632\u6b62OOM\u5f02\u5e38)\uff0c\u6839\u636e\u81ea\u5df1\u4e1a\u52a1\u6570\u636e\u5305\u7684\u5927\u5c0f\u9002\u5f53\u8c03\u5927\u3002\u8fd9\u91cc\u53d6\u503c\u662fint\u7c7b\u578b\u7684\uff0c\u800c\u53d7\u9650\u4e8ejava int\u7c7b\u578b\u7684\u53d6\u503c\u8303\u56f4 java int\u7684\u53d6\u503c\u8303\u56f4\u4e3a\uff08-2147483648~2147483647\uff09 log \u6570\u636e\u6587\u4ef6\u5237\u76d8\u7b56\u7565 # \u6bcf\u5f53producer\u5199\u516510000\u6761\u6d88\u606f\u65f6\uff0c\u5237\u6570\u636e\u5230\u78c1\u76d8 log.flush.interval.messages=10000 # \u6bcf\u95f4\u96941\u79d2\u949f\u65f6\u95f4\uff0c\u5237\u6570\u636e\u5230\u78c1\u76d8 log.flush.interval.ms=1000 \u4e3a\u4e86\u5927\u5e45\u5ea6\u63d0\u9ad8producer\u5199\u5165\u541e\u5410\u91cf\uff0c\u9700\u8981\u5b9a\u671f\u6279\u91cf\u5199\u6587\u4ef6\u3002\u4e00\u822c\u65e0\u9700\u6539\u52a8\uff0c\u5982\u679ctopic\u7684\u6570\u636e\u91cf\u8f83\u5c0f\u53ef\u4ee5\u8003\u8651\u51cf\u5c11 log.flush.interval.ms \u548c log.flush.interval.messages \u6765\u5f3a\u5236\u5237\u5199\u6570\u636e\uff0c\u51cf\u5c11\u53ef\u80fd\u7531\u4e8e\u7f13\u5b58\u6570\u636e\u672a\u5199\u76d8\u5e26\u6765\u7684\u4e0d\u4e00\u81f4\u3002\u63a8\u8350\u914d\u7f6e\u5206\u522bmessage 10000\uff0c\u95f4\u96941s\u3002 Kafka\u5b98\u65b9\u5e76\u4e0d\u5efa\u8bae\u901a\u8fc7Broker\u7aef\u7684log.flush.interval.messages\u548clog.flush.interval.ms\u6765\u5f3a\u5236\u5199\u76d8\uff0c\u8ba4\u4e3a\u6570\u636e\u7684\u53ef\u9760\u6027\u5e94\u8be5\u901a\u8fc7Replica\u6765\u4fdd\u8bc1\uff0c\u800c\u5f3a\u5236Flush\u6570\u636e\u5230\u78c1\u76d8\u4f1a\u5bf9\u6574\u4f53\u6027\u80fd\u4ea7\u751f\u5f71\u54cd\u3002 \u65e5\u5fd7\u4fdd\u7559\u7b56\u7565\u914d\u7f6e # \u65e5\u5fd7\u4fdd\u7559\u65f6\u957f log.retention.hours=72 \u65e5\u5fd7\u5efa\u8bae\u4fdd\u7559\u4e09\u5929\uff0c\u4e5f\u53ef\u4ee5\u66f4\u77ed \u65e5\u5fd7\u6587\u4ef6 # \u6bb5\u6587\u4ef6\u5927\u5c0f log.segment.bytes=1073741824 \u6bb5\u6587\u4ef6\u914d\u7f6e1GB\uff0c\u6709\u5229\u4e8e\u5feb\u901f\u56de\u6536\u78c1\u76d8\u7a7a\u95f4\uff0c\u91cd\u542fkafka\u52a0\u8f7d\u4e5f\u4f1a\u52a0\u5feb\u3002 kafka\u542f\u52a8\u65f6\u4f1a\u52a0\u8f7d\u76ee\u5f55(log.dir)\u4e0b\u6240\u6709\u6570\u636e\u6587\u4ef6\uff0c\u5982\u679c\u6bb5\u6587\u4ef6\u8fc7\u5c0f\uff0c\u5219\u6587\u4ef6\u6570\u91cf\u6bd4\u8f83\u591a\u3002 # \u542f\u52a8\u65f6\u6bcf\u4e2a\u6587\u4ef6\u5939\u5bf9\u5e94\u7684\u7ebf\u7a0b\u6570 num.recovery.threads.per.data.dir=1 \u589e\u52a0 num.recovery.threads.per.data.dir \u4e5f\u53ef\u4ee5\u63d0\u9ad8\u52a0\u8f7d\u901f\u5ea6\u3002 replica\u590d\u5236\u914d\u7f6e # \u62c9\u53d6\u7ebf\u7a0b\u6570\uff1afetchers \u914d\u7f6e\u591a\u53ef\u4ee5\u63d0\u9ad8follower\u7684I/O\u5e76\u53d1\u5ea6\uff0c\u5355\u4f4d\u65f6\u95f4\u5185leader\u6301\u6709\u66f4\u591a\u8bf7\u6c42\uff0c\u76f8\u5e94\u8d1f\u8f7d\u4f1a\u589e\u5927\uff0c\u9700\u8981\u6839\u636e\u673a\u5668\u786c\u4ef6\u8d44\u6e90\u505a\u6743\u8861\uff0c\u5efa\u8bae\u9002\u5f53\u8c03\u5927\uff1b num.replica.fetchers=3 # \u62c9\u53d6\u6d88\u606f\u6700\u5c0f\u5b57\u8282\uff1a\u4e00\u822c\u65e0\u9700\u66f4\u6539\uff0c\u9ed8\u8ba4\u503c\u5373\u53ef\uff1b replica.fetch.min.bytes=1 # \u62c9\u53d6\u6d88\u606f\u6700\u5927\u5b57\u8282\uff1a\u9ed8\u8ba4\u4e3a1MB\uff0c\u6839\u636e\u4e1a\u52a1\u60c5\u51b5\u8c03\u6574 replica.fetch.max.bytes=5242880 # \u62c9\u53d6\u6d88\u606f\u7b49\u5f85\u65f6\u95f4\uff1a\u51b3\u5b9a follower \u7684\u62c9\u53d6\u9891\u7387\uff0c\u9891\u7387\u8fc7\u9ad8\uff0cleader\u4f1a\u79ef\u538b\u5927\u91cf\u65e0\u6548\u8bf7\u6c42\u60c5\u51b5\uff0c\u65e0\u6cd5\u8fdb\u884c\u6570\u636e\u540c\u6b65\uff0c\u5bfc\u81f4cpu\u98d9\u5347\u3002\u914d\u7f6e\u65f6\u8c28\u614e\u4f7f\u7528\uff0c\u5efa\u8bae\u9ed8\u8ba4\u503c\uff0c\u65e0\u9700\u914d\u7f6e\u3002 replica.fetch.wait.max.ms \u5206\u533a\u6570\u91cf\u914d\u7f6e num.partitions=1 \u9ed8\u8ba4 partition \u6570\u91cf 1\uff0c\u5982\u679ctopic\u5728\u521b\u5efa\u65f6\u6ca1\u6709\u6307\u5b9apartition\u6570\u91cf\uff0c\u9ed8\u8ba4\u4f7f\u7528\u6b64\u503c\u3002Partition\u7684\u6570\u91cf\u9009\u53d6\u4e5f\u4f1a\u76f4\u63a5\u5f71\u54cd\u5230Kafka\u96c6\u7fa4\u7684\u541e\u5410\u6027\u80fd\uff0c\u914d\u7f6e\u8fc7\u5c0f\u4f1a\u5f71\u54cd\u6d88\u8d39\u6027\u80fd\u3002 replica \u6570\u914d\u7f6e default.replication.factor=1 \u8fd9\u4e2a\u53c2\u6570\u6307\u65b0\u521b\u5efa\u4e00\u4e2atopic\u65f6\uff0c\u9ed8\u8ba4\u7684Replica\u6570\u91cf\uff0cReplica\u8fc7\u5c11\u4f1a\u5f71\u54cd\u6570\u636e\u7684\u53ef\u7528\u6027\uff0c\u592a\u591a\u5219\u4f1a\u767d\u767d\u6d6a\u8d39\u5b58\u50a8\u8d44\u6e90\uff0c\u4e00\u822c\u5efa\u8bae\u57282~3\u4e3a\u5b9c\u3002 replica lag replica.lag.time.max.ms=10000 replica.lag.max.messages=4000 auto rebalance auto.leader.rebalance.enable=true leader.imbalance.check.interval.seconds=300 leader.imbalance.per.broker.percentage=10 offset retention offsets.retention.check.interval.ms = 600000 offsets.retention.minutes = 1440 \u65f6\u95f4\u6233 0.10.0.0 \u7248\u672c\u540e\uff0ckafka \u6d88\u606f\u589e\u52a0\u4e86 timestamp \u5b57\u6bb5\u3002 log.message.timestamp.type=CreateTime/LogAppendTime producer \u5199\u5165\u7684\u6d88\u606f\u53ef\u4ee5\u8bbe\u7f6e timestamp \u5b57\u6bb5\uff0c(\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5219\u4f7f\u7528 producer \u5ba2\u6237\u7aef\u7684\u5f53\u524d\u65f6\u95f4)\u3002 \u65f6\u95f4\u6233\u6709 2 \u4e2d\u7c7b\u578b\uff1a CreateTime : LogAppendTime : \u4f7f\u7528 broker \u5f53\u524d\u65f6\u95f4\u8986\u76d6 \u6d88\u606f\u643a\u5e26\u7684 timestamp\uff0c \u65f6\u95f4\u6233\u7c7b\u578b\u4e3a CreateTime \uff0c\u5141\u8bb8 create time \u4e0e\u5f53\u524d\u65f6\u95f4\u6700\u5927\u7684\u65f6\u95f4\u5dee\uff1a log.message.timestamp.difference.max.ms=9223372036854775807","title":"3.2 borker config"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/2-broker-config/#broker","text":"","title":"Broker \u53c2\u6570\u914d\u7f6e"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/2-broker-config/#broker-id-and-rack","text":"# integer \u7c7b\u578b\uff0c\u9ed8\u8ba4 -1\u3002 # \u624b\u52a8\u8bbe\u7f6e\u5e94\u8be5\u4ece 0 \u5f00\u59cb\uff0c\u6bcf\u4e2a broker \u4f9d\u6b21 +1\uff0c\u624b\u52a8\u8bbe\u7f6e\u7684\u503c\u4e0d\u80fd\u8d85\u8fc7 reserved.broker.max.id broker.id=0 # \u5982\u679c\u914d\u7f6e\u6587\u4ef6\u4e2d\u6ca1\u6709\u6307\u5b9a broker.id\uff0cbroker \u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2a broker.id\uff0c\u9ed8\u8ba4\u4ece reserved.broker.max.id+1 \u5f00\u59cb reserved.broker.max.id=1000 # string \u7c7b\u578b\uff0c\u9ed8\u8ba4 null\u3002 # topic partition \u7684 replica \u5206\u5e03\u5728\u4e0d\u540c\u7684 broker \u4e0a\uff0c\u4f46\u8fd9\u4e9b broker \u53ef\u80fd\u5728\u540c\u4e00\u4e2a\u673a\u67b6/\u673a\u623f/\u533a\u57df\u5185\uff0c # \u5982\u679c\u60f3\u8ba9 replica \u5728\u4e0d\u540c\u673a\u67b6/\u673a\u623f/\u533a\u57df\u5185\u5206\u5e03\uff0c\u53ef\u4ee5\u5c06\u4e0d\u540c\u673a\u67b6/\u673a\u623f/\u533a\u57df\u7684 broker \u914d\u7f6e\u4e0d\u540c\u7684 broker.rack\uff0c # \u914d\u7f6e\u540e\uff0ctopic partition \u7684 replica \u4f1a\u5206\u5e03\u5728\u4e0d\u540c\u7684 broker.rack broker.rack=null","title":"broker id and rack"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/2-broker-config/#io","text":"num.network.threads=9 broker\u5904\u7406\u6d88\u606f\u7684\u6700\u5927\u7ebf\u7a0b\u6570(\u4e3b\u8981\u5904\u7406\u7f51\u7edcio\uff0c\u8bfb\u5199\u7f13\u51b2\u533a\u6570\u636e\uff0c\u57fa\u672c\u6ca1\u6709io\u7b49\u5f85\uff0c\u914d\u7f6e\u7ebf\u7a0b\u6570\u91cf\u4e3acpu\u6838\u6570\u52a01) num.io.threads=16 broker\u5904\u7406\u78c1\u76d8IO\u7684\u7ebf\u7a0b\u6570(\u5904\u7406\u78c1\u76d8io\u64cd\u4f5c\uff0c\u9ad8\u5cf0\u671f\u53ef\u80fd\u6709\u4e9bio\u7b49\u5f85\uff0c\u56e0\u6b64\u914d\u7f6e\u9700\u8981\u5927\u4e9b\u3002\u914d\u7f6e\u7ebf\u7a0b\u6570\u91cf\u4e3acpu\u6838\u65702\u500d\uff0c\u6700\u5927\u4e0d\u8d85\u8fc73\u500d) socket.request.max.bytes=2147483600 socket server\u53ef\u63a5\u53d7\u6570\u636e\u5927\u5c0f(\u9632\u6b62OOM\u5f02\u5e38)\uff0c\u6839\u636e\u81ea\u5df1\u4e1a\u52a1\u6570\u636e\u5305\u7684\u5927\u5c0f\u9002\u5f53\u8c03\u5927\u3002\u8fd9\u91cc\u53d6\u503c\u662fint\u7c7b\u578b\u7684\uff0c\u800c\u53d7\u9650\u4e8ejava int\u7c7b\u578b\u7684\u53d6\u503c\u8303\u56f4 java int\u7684\u53d6\u503c\u8303\u56f4\u4e3a\uff08-2147483648~2147483647\uff09","title":"\u7f51\u7edc\u548c io \u64cd\u4f5c\u7ebf\u7a0b\u914d\u7f6e"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/2-broker-config/#log","text":"# \u6bcf\u5f53producer\u5199\u516510000\u6761\u6d88\u606f\u65f6\uff0c\u5237\u6570\u636e\u5230\u78c1\u76d8 log.flush.interval.messages=10000 # \u6bcf\u95f4\u96941\u79d2\u949f\u65f6\u95f4\uff0c\u5237\u6570\u636e\u5230\u78c1\u76d8 log.flush.interval.ms=1000 \u4e3a\u4e86\u5927\u5e45\u5ea6\u63d0\u9ad8producer\u5199\u5165\u541e\u5410\u91cf\uff0c\u9700\u8981\u5b9a\u671f\u6279\u91cf\u5199\u6587\u4ef6\u3002\u4e00\u822c\u65e0\u9700\u6539\u52a8\uff0c\u5982\u679ctopic\u7684\u6570\u636e\u91cf\u8f83\u5c0f\u53ef\u4ee5\u8003\u8651\u51cf\u5c11 log.flush.interval.ms \u548c log.flush.interval.messages \u6765\u5f3a\u5236\u5237\u5199\u6570\u636e\uff0c\u51cf\u5c11\u53ef\u80fd\u7531\u4e8e\u7f13\u5b58\u6570\u636e\u672a\u5199\u76d8\u5e26\u6765\u7684\u4e0d\u4e00\u81f4\u3002\u63a8\u8350\u914d\u7f6e\u5206\u522bmessage 10000\uff0c\u95f4\u96941s\u3002 Kafka\u5b98\u65b9\u5e76\u4e0d\u5efa\u8bae\u901a\u8fc7Broker\u7aef\u7684log.flush.interval.messages\u548clog.flush.interval.ms\u6765\u5f3a\u5236\u5199\u76d8\uff0c\u8ba4\u4e3a\u6570\u636e\u7684\u53ef\u9760\u6027\u5e94\u8be5\u901a\u8fc7Replica\u6765\u4fdd\u8bc1\uff0c\u800c\u5f3a\u5236Flush\u6570\u636e\u5230\u78c1\u76d8\u4f1a\u5bf9\u6574\u4f53\u6027\u80fd\u4ea7\u751f\u5f71\u54cd\u3002","title":"log \u6570\u636e\u6587\u4ef6\u5237\u76d8\u7b56\u7565"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/2-broker-config/#_1","text":"# \u65e5\u5fd7\u4fdd\u7559\u65f6\u957f log.retention.hours=72 \u65e5\u5fd7\u5efa\u8bae\u4fdd\u7559\u4e09\u5929\uff0c\u4e5f\u53ef\u4ee5\u66f4\u77ed","title":"\u65e5\u5fd7\u4fdd\u7559\u7b56\u7565\u914d\u7f6e"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/2-broker-config/#_2","text":"# \u6bb5\u6587\u4ef6\u5927\u5c0f log.segment.bytes=1073741824 \u6bb5\u6587\u4ef6\u914d\u7f6e1GB\uff0c\u6709\u5229\u4e8e\u5feb\u901f\u56de\u6536\u78c1\u76d8\u7a7a\u95f4\uff0c\u91cd\u542fkafka\u52a0\u8f7d\u4e5f\u4f1a\u52a0\u5feb\u3002 kafka\u542f\u52a8\u65f6\u4f1a\u52a0\u8f7d\u76ee\u5f55(log.dir)\u4e0b\u6240\u6709\u6570\u636e\u6587\u4ef6\uff0c\u5982\u679c\u6bb5\u6587\u4ef6\u8fc7\u5c0f\uff0c\u5219\u6587\u4ef6\u6570\u91cf\u6bd4\u8f83\u591a\u3002 # \u542f\u52a8\u65f6\u6bcf\u4e2a\u6587\u4ef6\u5939\u5bf9\u5e94\u7684\u7ebf\u7a0b\u6570 num.recovery.threads.per.data.dir=1 \u589e\u52a0 num.recovery.threads.per.data.dir \u4e5f\u53ef\u4ee5\u63d0\u9ad8\u52a0\u8f7d\u901f\u5ea6\u3002","title":"\u65e5\u5fd7\u6587\u4ef6"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/2-broker-config/#replica","text":"# \u62c9\u53d6\u7ebf\u7a0b\u6570\uff1afetchers \u914d\u7f6e\u591a\u53ef\u4ee5\u63d0\u9ad8follower\u7684I/O\u5e76\u53d1\u5ea6\uff0c\u5355\u4f4d\u65f6\u95f4\u5185leader\u6301\u6709\u66f4\u591a\u8bf7\u6c42\uff0c\u76f8\u5e94\u8d1f\u8f7d\u4f1a\u589e\u5927\uff0c\u9700\u8981\u6839\u636e\u673a\u5668\u786c\u4ef6\u8d44\u6e90\u505a\u6743\u8861\uff0c\u5efa\u8bae\u9002\u5f53\u8c03\u5927\uff1b num.replica.fetchers=3 # \u62c9\u53d6\u6d88\u606f\u6700\u5c0f\u5b57\u8282\uff1a\u4e00\u822c\u65e0\u9700\u66f4\u6539\uff0c\u9ed8\u8ba4\u503c\u5373\u53ef\uff1b replica.fetch.min.bytes=1 # \u62c9\u53d6\u6d88\u606f\u6700\u5927\u5b57\u8282\uff1a\u9ed8\u8ba4\u4e3a1MB\uff0c\u6839\u636e\u4e1a\u52a1\u60c5\u51b5\u8c03\u6574 replica.fetch.max.bytes=5242880 # \u62c9\u53d6\u6d88\u606f\u7b49\u5f85\u65f6\u95f4\uff1a\u51b3\u5b9a follower \u7684\u62c9\u53d6\u9891\u7387\uff0c\u9891\u7387\u8fc7\u9ad8\uff0cleader\u4f1a\u79ef\u538b\u5927\u91cf\u65e0\u6548\u8bf7\u6c42\u60c5\u51b5\uff0c\u65e0\u6cd5\u8fdb\u884c\u6570\u636e\u540c\u6b65\uff0c\u5bfc\u81f4cpu\u98d9\u5347\u3002\u914d\u7f6e\u65f6\u8c28\u614e\u4f7f\u7528\uff0c\u5efa\u8bae\u9ed8\u8ba4\u503c\uff0c\u65e0\u9700\u914d\u7f6e\u3002 replica.fetch.wait.max.ms","title":"replica\u590d\u5236\u914d\u7f6e"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/2-broker-config/#_3","text":"num.partitions=1 \u9ed8\u8ba4 partition \u6570\u91cf 1\uff0c\u5982\u679ctopic\u5728\u521b\u5efa\u65f6\u6ca1\u6709\u6307\u5b9apartition\u6570\u91cf\uff0c\u9ed8\u8ba4\u4f7f\u7528\u6b64\u503c\u3002Partition\u7684\u6570\u91cf\u9009\u53d6\u4e5f\u4f1a\u76f4\u63a5\u5f71\u54cd\u5230Kafka\u96c6\u7fa4\u7684\u541e\u5410\u6027\u80fd\uff0c\u914d\u7f6e\u8fc7\u5c0f\u4f1a\u5f71\u54cd\u6d88\u8d39\u6027\u80fd\u3002","title":"\u5206\u533a\u6570\u91cf\u914d\u7f6e"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/2-broker-config/#replica_1","text":"default.replication.factor=1 \u8fd9\u4e2a\u53c2\u6570\u6307\u65b0\u521b\u5efa\u4e00\u4e2atopic\u65f6\uff0c\u9ed8\u8ba4\u7684Replica\u6570\u91cf\uff0cReplica\u8fc7\u5c11\u4f1a\u5f71\u54cd\u6570\u636e\u7684\u53ef\u7528\u6027\uff0c\u592a\u591a\u5219\u4f1a\u767d\u767d\u6d6a\u8d39\u5b58\u50a8\u8d44\u6e90\uff0c\u4e00\u822c\u5efa\u8bae\u57282~3\u4e3a\u5b9c\u3002","title":"replica \u6570\u914d\u7f6e"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/2-broker-config/#replica-lag","text":"replica.lag.time.max.ms=10000 replica.lag.max.messages=4000","title":"replica lag"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/2-broker-config/#auto-rebalance","text":"auto.leader.rebalance.enable=true leader.imbalance.check.interval.seconds=300 leader.imbalance.per.broker.percentage=10","title":"auto rebalance"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/2-broker-config/#offset-retention","text":"offsets.retention.check.interval.ms = 600000 offsets.retention.minutes = 1440","title":"offset retention"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/2-broker-config/#_4","text":"0.10.0.0 \u7248\u672c\u540e\uff0ckafka \u6d88\u606f\u589e\u52a0\u4e86 timestamp \u5b57\u6bb5\u3002 log.message.timestamp.type=CreateTime/LogAppendTime producer \u5199\u5165\u7684\u6d88\u606f\u53ef\u4ee5\u8bbe\u7f6e timestamp \u5b57\u6bb5\uff0c(\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5219\u4f7f\u7528 producer \u5ba2\u6237\u7aef\u7684\u5f53\u524d\u65f6\u95f4)\u3002 \u65f6\u95f4\u6233\u6709 2 \u4e2d\u7c7b\u578b\uff1a CreateTime : LogAppendTime : \u4f7f\u7528 broker \u5f53\u524d\u65f6\u95f4\u8986\u76d6 \u6d88\u606f\u643a\u5e26\u7684 timestamp\uff0c \u65f6\u95f4\u6233\u7c7b\u578b\u4e3a CreateTime \uff0c\u5141\u8bb8 create time \u4e0e\u5f53\u524d\u65f6\u95f4\u6700\u5927\u7684\u65f6\u95f4\u5dee\uff1a log.message.timestamp.difference.max.ms=9223372036854775807","title":"\u65f6\u95f4\u6233"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/3-topic-config/","text":"Topic \u53c2\u6570\u914d\u7f6e \u65f6\u95f4\u6233 message.timestamp.type=LogAppendTime/CreateTime message.timestamp.difference.max.ms","title":"3.3 topic config"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/3-topic-config/#topic","text":"","title":"Topic \u53c2\u6570\u914d\u7f6e"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/3-topic-config/#_1","text":"message.timestamp.type=LogAppendTime/CreateTime message.timestamp.difference.max.ms","title":"\u65f6\u95f4\u6233"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/4-producer-config/","text":"\u751f\u4ea7\u8005\u53c2\u6570\u914d\u7f6e # \u5185\u5b58\u7f13\u51b2\u5927\u5c0f\uff0c\u5355\u4f4d byte buffer.memory=33554432 \u5728 Producer \u7aef\u7528\u6765\u5b58\u653e\u5c1a\u672a\u53d1\u9001\u51fa\u53bb\u7684 Message \u7684\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u9ed8\u8ba4 32MB\u3002\u5185\u5b58\u7f13\u51b2\u533a\u5185\u7684\u6d88\u606f\u4ee5\u4e00\u4e2a\u4e2a batch \u7684\u5f62\u5f0f\u7ec4\u7ec7\uff0c\u6bcf\u4e2a batch \u5185\u5305\u542b\u591a\u6761\u6d88\u606f\uff0cProducer \u4f1a\u628a\u591a\u4e2a batch \u6253\u5305\u6210\u4e00\u4e2a request \u53d1\u9001\u5230 kafka \u670d\u52a1\u5668\u4e0a\u3002\u5185\u5b58\u7f13\u51b2\u533a\u6ee1\u4e86\u4e4b\u540e\u53ef\u4ee5\u9009\u62e9\u963b\u585e\u53d1\u9001\u6216\u629b\u51fa\u5f02\u5e38\uff0c\u7531 block.on.buffer.full \u7684\u914d\u7f6e\u6765\u51b3\u5b9a\u3002 * \u5982\u679c\u9009\u62e9\u963b\u585e\uff0c\u5728\u6d88\u606f\u6301\u7eed\u53d1\u9001\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u7f13\u51b2\u533a\u88ab\u586b\u6ee1\u540e\uff0cproducer\u7acb\u5373\u8fdb\u5165\u963b\u585e\u72b6\u6001\u76f4\u5230\u7a7a\u95f2\u5185\u5b58\u88ab\u91ca\u653e\u51fa\u6765\uff0c\u8fd9\u6bb5\u65f6\u95f4\u4e0d\u80fd\u8d85\u8fc7 max.block.ms \u8bbe\u7f6e\u7684\u503c\uff0c\u4e00\u65e6\u8d85\u8fc7\uff0cproducer\u5219\u4f1a\u629b\u51fa TimeoutException \u5f02\u5e38\uff0c\u56e0\u4e3aProducer\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u82e5\u4e00\u76f4\u62a5TimeoutException\uff0c\u9700\u8981\u8003\u8651\u8c03\u9ad8buffer.memory \u4e86\u3002 batch.size=16384 Producer\u4f1a\u628a\u53d1\u5f80\u540c\u4e00\u4e2a topic partition \u7684\u591a\u4e2a\u6d88\u606f\u8fdb\u884c\u5408\u5e76\uff0c batch.size \u6307\u660e\u4e86\u5408\u5e76\u540e batch \u5927\u5c0f\u7684\u4e0a\u9650\u3002\u5982\u679c\u8fd9\u4e2a\u503c\u8bbe\u7f6e\u7684\u592a\u5c0f\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6240\u6709\u7684Request\u90fd\u4e0d\u8fdb\u884cBatch\u3002 linger.ms=0 producer \u5408\u5e76\u7684\u6d88\u606f\u7684\u5927\u5c0f\u672a\u8fbe\u5230 batch.size \uff0c\u4f46\u5982\u679c\u5b58\u5728\u65f6\u95f4\u8fbe\u5230 linger.ms \uff0c\u4e5f\u4f1a\u8fdb\u884c\u53d1\u9001\u3002 # \u6700\u5927\u8bf7\u6c42\u5927\u5c0f max.request.size \u51b3\u5b9a\u4e86\u6bcf\u6b21\u53d1\u9001\u7ed9Kafka\u670d\u52a1\u5668\u8bf7\u6c42\u7684\u6700\u5927\u5927\u5c0f\uff0c\u540c\u65f6\u4e5f\u4f1a\u9650\u5236\u4f60\u4e00\u6761\u6d88\u606f\u7684\u6700\u5927\u5927\u5c0f\u4e5f\u4e0d\u80fd\u8d85\u8fc7\u8fd9\u4e2a\u53c2\u6570\u8bbe\u7f6e\u7684\u503c\uff0c\u8fd9\u4e2a\u5176\u5b9e\u53ef\u4ee5\u6839\u636e\u4f60\u81ea\u5df1\u7684\u6d88\u606f\u7684\u5927\u5c0f\u6765\u7075\u6d3b\u7684\u8c03\u6574 # \u53d1\u9001\u5931\u8d25\u91cd\u8bd5\u6b21\u6570 retries # \u6bcf\u6b21\u91cd\u8bd5\u95f4\u9694\u65f6\u95f4 retries.backoff.ms # \u538b\u7f29\u7c7b\u578b compression.type=none \u9ed8\u8ba4\u53d1\u9001\u4e0d\u8fdb\u884c\u538b\u7f29\uff0c\u63a8\u8350\u914d\u7f6e\u4e00\u79cd\u9002\u5408\u7684\u538b\u7f29\u7b97\u6cd5\uff0c\u53ef\u4ee5\u5927\u5e45\u5ea6\u7684\u51cf\u7f13\u7f51\u7edc\u538b\u529b\u548cBroker\u7684\u5b58\u50a8\u538b\u529b\u3002 acks=1 \u8fd9\u4e2a\u914d\u7f6e\u53ef\u4ee5\u8bbe\u5b9a\u53d1\u9001\u6d88\u606f\u540e\u662f\u5426\u9700\u8981Broker\u7aef\u8fd4\u56de\u786e\u8ba4\uff0c\u8bbe\u7f6e\u65f6\u9700\u8981\u6743\u8861\u6570\u636e\u53ef\u9760\u6027\u548c\u541e\u5410\u91cf\u3002 acks : * 0\uff1a\u8868\u793a producer \u8bf7\u6c42\u7acb\u5373\u8fd4\u56de\uff0c\u4e0d\u9700\u8981\u7b49\u5f85 leader \u7684\u4efb\u4f55\u786e\u8ba4 * -1\uff1a\u8868\u793a\u5206\u533a leader \u5fc5\u987b\u7b49\u5f85\u6d88\u606f\u88ab\u6210\u529f\u5199\u5165\u5230\u6240\u6709\u7684 ISR \u526f\u672c\u4e2d\u624d\u8ba4\u4e3a producer \u6210\u529f * 1\uff1a\u8868\u793a leader \u526f\u672c\u5fc5\u987b\u5e94\u7b54\u6b64 producer \u8bf7\u6c42\u5e76\u5199\u5165\u6d88\u606f\u5230\u672c\u5730\u65e5\u5fd7\uff0c\u4e4b\u540e producer \u8bf7\u6c42\u88ab\u8ba4\u4e3a\u6210\u529f \u751f\u4ea7\u8005\u4e0d\u4e22\u5931\u6570\u636e\u4fdd\u8bc1 block.on.buffer.full = true \u751f\u4ea7\u8005\u6d88\u606f\u5728\u5b9e\u9645\u53d1\u9001\u4e4b\u524d\u662f\u4fdd\u7559\u5728 buffer \u4e2d\uff0cbuffer \u6ee1\u4e4b\u540e\u751f\u4ea7\u7b49\u5f85\uff0c\u800c\u4e0d\u662f\u629b\u51fa\u5f02\u5e38 acks=all \u6240\u6709 follower \u90fd\u54cd\u5e94\u540e\u624d\u8ba4\u4e3a\u6d88\u606f\u63d0\u4ea4\u6210\u529f\uff08\u9700\u8981\u6ce8\u610f broker \u7684 min.insync.replicas \u53c2\u6570\uff09 retries=Integer.MAX_VALUE \u53d1\u9001\u5931\u8d25\u540e\u6301\u7eed\u91cd\u8bd5\uff08\u5355\u72ec\u8bbe\u7f6e\u8fd9\u4e2a\u53ef\u80fd\u4f1a\u9020\u6210\u6d88\u606f\u91cd\u590d\u53d1\u9001\uff09 max.in.flight.requests.per.connection=1 \u5355\u4e2a\u7ebf\u7a0b\u5728\u5355\u4e2a\u8fde\u63a5\u4e0a\u80fd\u591f\u53d1\u9001\u7684\u672a\u54cd\u5e94\u8bf7\u6c42\u4e2a\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u8bbe\u7f6e\u4e3a 1 \u53ef\u4ee5\u907f\u514d\u6d88\u606f\u4e71\u5e8f\uff0c\u540c\u65f6\u53ef\u4ee5\u4fdd\u8bc1\u5728 retry \u662f\u4e0d\u4f1a\u91cd\u590d\u53d1\u9001\u6d88\u606f\uff0c\u4f46\u662f\u4f1a\u964d\u4f4e producer io \u7ebf\u7a0b\u7684\u541e\u5410\u91cf unclean.leader.election.enable=false \u5173\u95ed unclean leader \u9009\u4e3e\uff0c\u5373\u4e0d\u5141\u8bb8\u975e ISR \u4e2d\u7684\u526f\u672c\u88ab\u9009\u4e3e\u4e3a leader \u5e42\u7b49\u6027 enable.idempotence \u5355\u4e2a\u4f1a\u8bdd\uff0c\u5355\u4e2a partition \u5e42\u7b49\u6027\uff0c\u91cd\u590d\u53d1\u9001\u6570\u636e\u65f6 exactly once Properties props = new Properties (); props . put ( \"enable.idempotence\" , \"true\" ); props . put ( \"acks\" , \"all\" ); // \u5f53 enable.idempotence \u4e3a true\uff0c\u8fd9\u91cc\u9ed8\u8ba4\u4e3a all props . put ( \"bootstrap.servers\" , \"localhost:9092\" ); props . put ( \"key.serializer\" , \"org.apache.kafka.common.serialization.StringSerializer\" ); props . put ( \"value.serializer\" , \"org.apache.kafka.common.serialization.StringSerializer\" ); KafkaProducer producer = new KafkaProducer ( props ); kafka \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e ack , retries \u7b49\u53c2\u6570\u4fdd\u8bc1\u6d88\u606f\u4e0d\u4e22\u5931\uff0c\u4f46\u662f\u65e0\u6cd5\u6d88\u606f\u4e0d\u91cd\u590d\uff08\u5373 at least once\uff09\u3002 \u5e42\u7b49\u6027\u89e3\u51b3\u6d88\u606f\u91cd\u590d\u7684\u95ee\u9898\uff0c\u5373\u591a\u6b21\u53d1\u9001\u540c\u4e00\u6761\u6d88\u606f\u5230 server \u7aef\uff0cserver \u53ea\u4f1a\u8bb0\u5f55\u4e00\u6b21\uff0c\u4e4b\u540e\u91cd\u590d\u53d1\u9001\u7684\u6d88\u606f\u4f1a\u88ab\u4e22\u5f03\u3002 \u4e3a\u4e86\u6d88\u606f\u662f\u5426\u91cd\u590d\uff0cKafka \u4f7f\u7528 producer_id + sequence_number \u6807\u8bb0\u6bcf\u6761\u6d88\u606f\uff0c\u7531 topic partiton \u6240\u5728 leader \u8fdb\u884c\u5224\u65ad\u5e76\u53bb\u91cd\u3002 \u6bcf\u4e2a producer \u5728\u521d\u59cb\u5316\u65f6\uff0c\u4f1a\u5411 server \u7aef\u7533\u8bf7\u4e00\u4e2a\u552f\u4e00\u7684 producer_id \u3002\u4e4b\u540e\u53d1\u9001\u7684\u6bcf\u6761\u6d88\u606f\uff0c\u90fd\u4f1a\u5173\u8054\u4e00\u4e2a\u4ece 0 \u5f00\u59cb\u9012\u589e\u7684 sequence_number \uff0c\u6bcf\u4e2a topic partition \u90fd\u4f1a\u7ef4\u62a4\u4e00\u4e2a\u5355\u72ec\u7684 sequence_number \u3002 \u4e8b\u52a1\u6027 \u751f\u4ea7\u8005\u4e8b\u52a1 id transactional.id \u8bbe\u7f6e\u4e8b\u52a1 id \u540e\uff0c enable.idempotence \u9ed8\u8ba4\u5f00\u542f Properties props = new Properties (); props . put ( \"key.serializer\" , \"org.apache.kafka.common.serialization.StringSerializer\" ); props . put ( \"value.serializer\" , \"org.apache.kafka.common.serialization.StringSerializer\" ); props . put ( \"client.id\" , \"ProducerTranscationnalExample\" ); props . put ( \"bootstrap.servers\" , \"localhost:9092\" ); props . put ( \"transactional.id\" , \"test-transactional\" ); props . put ( \"acks\" , \"all\" ); KafkaProducer producer = new KafkaProducer ( props ); producer . initTransactions (); try { String msg = \"matt test\" ; producer . beginTransaction (); producer . send ( new ProducerRecord ( topic , \"0\" , msg . toString ())); producer . send ( new ProducerRecord ( topic , \"1\" , msg . toString ())); producer . send ( new ProducerRecord ( topic , \"2\" , msg . toString ())); producer . commitTransaction (); } catch ( ProducerFencedException e1 ) { e1 . printStackTrace (); producer . close (); } catch ( KafkaException e2 ) { e2 . printStackTrace (); producer . abortTransaction (); } producer . close ();","title":"3.4 producer config"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/4-producer-config/#_1","text":"# \u5185\u5b58\u7f13\u51b2\u5927\u5c0f\uff0c\u5355\u4f4d byte buffer.memory=33554432 \u5728 Producer \u7aef\u7528\u6765\u5b58\u653e\u5c1a\u672a\u53d1\u9001\u51fa\u53bb\u7684 Message \u7684\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u9ed8\u8ba4 32MB\u3002\u5185\u5b58\u7f13\u51b2\u533a\u5185\u7684\u6d88\u606f\u4ee5\u4e00\u4e2a\u4e2a batch \u7684\u5f62\u5f0f\u7ec4\u7ec7\uff0c\u6bcf\u4e2a batch \u5185\u5305\u542b\u591a\u6761\u6d88\u606f\uff0cProducer \u4f1a\u628a\u591a\u4e2a batch \u6253\u5305\u6210\u4e00\u4e2a request \u53d1\u9001\u5230 kafka \u670d\u52a1\u5668\u4e0a\u3002\u5185\u5b58\u7f13\u51b2\u533a\u6ee1\u4e86\u4e4b\u540e\u53ef\u4ee5\u9009\u62e9\u963b\u585e\u53d1\u9001\u6216\u629b\u51fa\u5f02\u5e38\uff0c\u7531 block.on.buffer.full \u7684\u914d\u7f6e\u6765\u51b3\u5b9a\u3002 * \u5982\u679c\u9009\u62e9\u963b\u585e\uff0c\u5728\u6d88\u606f\u6301\u7eed\u53d1\u9001\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u7f13\u51b2\u533a\u88ab\u586b\u6ee1\u540e\uff0cproducer\u7acb\u5373\u8fdb\u5165\u963b\u585e\u72b6\u6001\u76f4\u5230\u7a7a\u95f2\u5185\u5b58\u88ab\u91ca\u653e\u51fa\u6765\uff0c\u8fd9\u6bb5\u65f6\u95f4\u4e0d\u80fd\u8d85\u8fc7 max.block.ms \u8bbe\u7f6e\u7684\u503c\uff0c\u4e00\u65e6\u8d85\u8fc7\uff0cproducer\u5219\u4f1a\u629b\u51fa TimeoutException \u5f02\u5e38\uff0c\u56e0\u4e3aProducer\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u82e5\u4e00\u76f4\u62a5TimeoutException\uff0c\u9700\u8981\u8003\u8651\u8c03\u9ad8buffer.memory \u4e86\u3002 batch.size=16384 Producer\u4f1a\u628a\u53d1\u5f80\u540c\u4e00\u4e2a topic partition \u7684\u591a\u4e2a\u6d88\u606f\u8fdb\u884c\u5408\u5e76\uff0c batch.size \u6307\u660e\u4e86\u5408\u5e76\u540e batch \u5927\u5c0f\u7684\u4e0a\u9650\u3002\u5982\u679c\u8fd9\u4e2a\u503c\u8bbe\u7f6e\u7684\u592a\u5c0f\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6240\u6709\u7684Request\u90fd\u4e0d\u8fdb\u884cBatch\u3002 linger.ms=0 producer \u5408\u5e76\u7684\u6d88\u606f\u7684\u5927\u5c0f\u672a\u8fbe\u5230 batch.size \uff0c\u4f46\u5982\u679c\u5b58\u5728\u65f6\u95f4\u8fbe\u5230 linger.ms \uff0c\u4e5f\u4f1a\u8fdb\u884c\u53d1\u9001\u3002 # \u6700\u5927\u8bf7\u6c42\u5927\u5c0f max.request.size \u51b3\u5b9a\u4e86\u6bcf\u6b21\u53d1\u9001\u7ed9Kafka\u670d\u52a1\u5668\u8bf7\u6c42\u7684\u6700\u5927\u5927\u5c0f\uff0c\u540c\u65f6\u4e5f\u4f1a\u9650\u5236\u4f60\u4e00\u6761\u6d88\u606f\u7684\u6700\u5927\u5927\u5c0f\u4e5f\u4e0d\u80fd\u8d85\u8fc7\u8fd9\u4e2a\u53c2\u6570\u8bbe\u7f6e\u7684\u503c\uff0c\u8fd9\u4e2a\u5176\u5b9e\u53ef\u4ee5\u6839\u636e\u4f60\u81ea\u5df1\u7684\u6d88\u606f\u7684\u5927\u5c0f\u6765\u7075\u6d3b\u7684\u8c03\u6574 # \u53d1\u9001\u5931\u8d25\u91cd\u8bd5\u6b21\u6570 retries # \u6bcf\u6b21\u91cd\u8bd5\u95f4\u9694\u65f6\u95f4 retries.backoff.ms # \u538b\u7f29\u7c7b\u578b compression.type=none \u9ed8\u8ba4\u53d1\u9001\u4e0d\u8fdb\u884c\u538b\u7f29\uff0c\u63a8\u8350\u914d\u7f6e\u4e00\u79cd\u9002\u5408\u7684\u538b\u7f29\u7b97\u6cd5\uff0c\u53ef\u4ee5\u5927\u5e45\u5ea6\u7684\u51cf\u7f13\u7f51\u7edc\u538b\u529b\u548cBroker\u7684\u5b58\u50a8\u538b\u529b\u3002 acks=1 \u8fd9\u4e2a\u914d\u7f6e\u53ef\u4ee5\u8bbe\u5b9a\u53d1\u9001\u6d88\u606f\u540e\u662f\u5426\u9700\u8981Broker\u7aef\u8fd4\u56de\u786e\u8ba4\uff0c\u8bbe\u7f6e\u65f6\u9700\u8981\u6743\u8861\u6570\u636e\u53ef\u9760\u6027\u548c\u541e\u5410\u91cf\u3002 acks : * 0\uff1a\u8868\u793a producer \u8bf7\u6c42\u7acb\u5373\u8fd4\u56de\uff0c\u4e0d\u9700\u8981\u7b49\u5f85 leader \u7684\u4efb\u4f55\u786e\u8ba4 * -1\uff1a\u8868\u793a\u5206\u533a leader \u5fc5\u987b\u7b49\u5f85\u6d88\u606f\u88ab\u6210\u529f\u5199\u5165\u5230\u6240\u6709\u7684 ISR \u526f\u672c\u4e2d\u624d\u8ba4\u4e3a producer \u6210\u529f * 1\uff1a\u8868\u793a leader \u526f\u672c\u5fc5\u987b\u5e94\u7b54\u6b64 producer \u8bf7\u6c42\u5e76\u5199\u5165\u6d88\u606f\u5230\u672c\u5730\u65e5\u5fd7\uff0c\u4e4b\u540e producer \u8bf7\u6c42\u88ab\u8ba4\u4e3a\u6210\u529f","title":"\u751f\u4ea7\u8005\u53c2\u6570\u914d\u7f6e"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/4-producer-config/#_2","text":"block.on.buffer.full = true \u751f\u4ea7\u8005\u6d88\u606f\u5728\u5b9e\u9645\u53d1\u9001\u4e4b\u524d\u662f\u4fdd\u7559\u5728 buffer \u4e2d\uff0cbuffer \u6ee1\u4e4b\u540e\u751f\u4ea7\u7b49\u5f85\uff0c\u800c\u4e0d\u662f\u629b\u51fa\u5f02\u5e38 acks=all \u6240\u6709 follower \u90fd\u54cd\u5e94\u540e\u624d\u8ba4\u4e3a\u6d88\u606f\u63d0\u4ea4\u6210\u529f\uff08\u9700\u8981\u6ce8\u610f broker \u7684 min.insync.replicas \u53c2\u6570\uff09 retries=Integer.MAX_VALUE \u53d1\u9001\u5931\u8d25\u540e\u6301\u7eed\u91cd\u8bd5\uff08\u5355\u72ec\u8bbe\u7f6e\u8fd9\u4e2a\u53ef\u80fd\u4f1a\u9020\u6210\u6d88\u606f\u91cd\u590d\u53d1\u9001\uff09 max.in.flight.requests.per.connection=1 \u5355\u4e2a\u7ebf\u7a0b\u5728\u5355\u4e2a\u8fde\u63a5\u4e0a\u80fd\u591f\u53d1\u9001\u7684\u672a\u54cd\u5e94\u8bf7\u6c42\u4e2a\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u8bbe\u7f6e\u4e3a 1 \u53ef\u4ee5\u907f\u514d\u6d88\u606f\u4e71\u5e8f\uff0c\u540c\u65f6\u53ef\u4ee5\u4fdd\u8bc1\u5728 retry \u662f\u4e0d\u4f1a\u91cd\u590d\u53d1\u9001\u6d88\u606f\uff0c\u4f46\u662f\u4f1a\u964d\u4f4e producer io \u7ebf\u7a0b\u7684\u541e\u5410\u91cf unclean.leader.election.enable=false \u5173\u95ed unclean leader \u9009\u4e3e\uff0c\u5373\u4e0d\u5141\u8bb8\u975e ISR \u4e2d\u7684\u526f\u672c\u88ab\u9009\u4e3e\u4e3a leader","title":"\u751f\u4ea7\u8005\u4e0d\u4e22\u5931\u6570\u636e\u4fdd\u8bc1"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/4-producer-config/#_3","text":"enable.idempotence \u5355\u4e2a\u4f1a\u8bdd\uff0c\u5355\u4e2a partition \u5e42\u7b49\u6027\uff0c\u91cd\u590d\u53d1\u9001\u6570\u636e\u65f6 exactly once Properties props = new Properties (); props . put ( \"enable.idempotence\" , \"true\" ); props . put ( \"acks\" , \"all\" ); // \u5f53 enable.idempotence \u4e3a true\uff0c\u8fd9\u91cc\u9ed8\u8ba4\u4e3a all props . put ( \"bootstrap.servers\" , \"localhost:9092\" ); props . put ( \"key.serializer\" , \"org.apache.kafka.common.serialization.StringSerializer\" ); props . put ( \"value.serializer\" , \"org.apache.kafka.common.serialization.StringSerializer\" ); KafkaProducer producer = new KafkaProducer ( props ); kafka \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e ack , retries \u7b49\u53c2\u6570\u4fdd\u8bc1\u6d88\u606f\u4e0d\u4e22\u5931\uff0c\u4f46\u662f\u65e0\u6cd5\u6d88\u606f\u4e0d\u91cd\u590d\uff08\u5373 at least once\uff09\u3002 \u5e42\u7b49\u6027\u89e3\u51b3\u6d88\u606f\u91cd\u590d\u7684\u95ee\u9898\uff0c\u5373\u591a\u6b21\u53d1\u9001\u540c\u4e00\u6761\u6d88\u606f\u5230 server \u7aef\uff0cserver \u53ea\u4f1a\u8bb0\u5f55\u4e00\u6b21\uff0c\u4e4b\u540e\u91cd\u590d\u53d1\u9001\u7684\u6d88\u606f\u4f1a\u88ab\u4e22\u5f03\u3002 \u4e3a\u4e86\u6d88\u606f\u662f\u5426\u91cd\u590d\uff0cKafka \u4f7f\u7528 producer_id + sequence_number \u6807\u8bb0\u6bcf\u6761\u6d88\u606f\uff0c\u7531 topic partiton \u6240\u5728 leader \u8fdb\u884c\u5224\u65ad\u5e76\u53bb\u91cd\u3002 \u6bcf\u4e2a producer \u5728\u521d\u59cb\u5316\u65f6\uff0c\u4f1a\u5411 server \u7aef\u7533\u8bf7\u4e00\u4e2a\u552f\u4e00\u7684 producer_id \u3002\u4e4b\u540e\u53d1\u9001\u7684\u6bcf\u6761\u6d88\u606f\uff0c\u90fd\u4f1a\u5173\u8054\u4e00\u4e2a\u4ece 0 \u5f00\u59cb\u9012\u589e\u7684 sequence_number \uff0c\u6bcf\u4e2a topic partition \u90fd\u4f1a\u7ef4\u62a4\u4e00\u4e2a\u5355\u72ec\u7684 sequence_number \u3002","title":"\u5e42\u7b49\u6027"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/4-producer-config/#_4","text":"\u751f\u4ea7\u8005\u4e8b\u52a1 id transactional.id \u8bbe\u7f6e\u4e8b\u52a1 id \u540e\uff0c enable.idempotence \u9ed8\u8ba4\u5f00\u542f Properties props = new Properties (); props . put ( \"key.serializer\" , \"org.apache.kafka.common.serialization.StringSerializer\" ); props . put ( \"value.serializer\" , \"org.apache.kafka.common.serialization.StringSerializer\" ); props . put ( \"client.id\" , \"ProducerTranscationnalExample\" ); props . put ( \"bootstrap.servers\" , \"localhost:9092\" ); props . put ( \"transactional.id\" , \"test-transactional\" ); props . put ( \"acks\" , \"all\" ); KafkaProducer producer = new KafkaProducer ( props ); producer . initTransactions (); try { String msg = \"matt test\" ; producer . beginTransaction (); producer . send ( new ProducerRecord ( topic , \"0\" , msg . toString ())); producer . send ( new ProducerRecord ( topic , \"1\" , msg . toString ())); producer . send ( new ProducerRecord ( topic , \"2\" , msg . toString ())); producer . commitTransaction (); } catch ( ProducerFencedException e1 ) { e1 . printStackTrace (); producer . close (); } catch ( KafkaException e2 ) { e2 . printStackTrace (); producer . abortTransaction (); } producer . close ();","title":"\u4e8b\u52a1\u6027"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/5-consumer-config/","text":"\u6d88\u8d39\u8005\u53c2\u6570\u914d\u7f6e fetch.min.bytes=1 \u6bcf\u6b21Fetch Request\u81f3\u5c11\u8981\u62ff\u5230\u591a\u5c11\u5b57\u8282\u7684\u6570\u636e\u624d\u53ef\u4ee5\u8fd4\u56de\u3002 enable.auto.commit \u662f\u5426\u542f\u7528\u81ea\u52a8\u63d0\u4ea4\u3002 auto.commit.interval.ms \u81ea\u52a8\u63d0\u4ea4\u95f4\u9694 consumer \u4ec0\u4e48\u65f6\u5019\u88ab\u8ba4\u4e3a\u4e0b\u7ebf \u5fc3\u8df3 session.timeout.ms=10000 \u4f1a\u8bdd\u8d85\u65f6\u65f6\u95f4\uff0c\u5982\u679c\u53d1\u9001\u5fc3\u8df3\u65f6\u95f4\u8d85\u8fc7\u8fd9\u4e2a\u65f6\u95f4\uff0cbroker \u5c31\u4f1a\u8ba4\u4e3a\u6d88\u8d39\u8005\u6389\u7ebf heartbeat.interval.ms=3000 \u53d1\u9001\u5fc3\u8df3\u95f4\u9694\u65f6\u95f4\uff0c\u63a8\u8350\u4e0d\u8981\u9ad8\u4e8e session.timeout.ms \u7684 1/3 poll max.poll.interval.ms=300000 poll() \u8c03\u7528\u7684\u6700\u5927\u65f6\u95f4\u95f4\u9694\uff0c\u5982\u679c\u8ddd\u79bb\u4e0a\u4e00\u6b21 poll() \u8c03\u7528\u7684\u65f6\u95f4\u8d85\u8fc7 max.poll.interval.ms \uff0c\u6d88\u8d39\u8005\u4f1a\u88ab\u8ba4\u4e3a\u5931\u8d25 max.poll.records=500 \u5355\u6b21 poll() \u8c03\u7528\u53ef\u4ee5\u62c9\u53d6\u7684\u6700\u591a\u6d88\u606f \u4e8b\u52a1 \u8bfb\u5df2\u63d0\u4ea4\u6d88\u606f\uff0c\u5173\u95ed\u81ea\u52a8\u63d0\u4ea4 offset isolation.level=read_committed enable.auto.commit=false","title":"3.5 consumer config"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/5-consumer-config/#_1","text":"fetch.min.bytes=1 \u6bcf\u6b21Fetch Request\u81f3\u5c11\u8981\u62ff\u5230\u591a\u5c11\u5b57\u8282\u7684\u6570\u636e\u624d\u53ef\u4ee5\u8fd4\u56de\u3002 enable.auto.commit \u662f\u5426\u542f\u7528\u81ea\u52a8\u63d0\u4ea4\u3002 auto.commit.interval.ms \u81ea\u52a8\u63d0\u4ea4\u95f4\u9694","title":"\u6d88\u8d39\u8005\u53c2\u6570\u914d\u7f6e"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/5-consumer-config/#consumer","text":"","title":"consumer \u4ec0\u4e48\u65f6\u5019\u88ab\u8ba4\u4e3a\u4e0b\u7ebf"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/5-consumer-config/#_2","text":"session.timeout.ms=10000 \u4f1a\u8bdd\u8d85\u65f6\u65f6\u95f4\uff0c\u5982\u679c\u53d1\u9001\u5fc3\u8df3\u65f6\u95f4\u8d85\u8fc7\u8fd9\u4e2a\u65f6\u95f4\uff0cbroker \u5c31\u4f1a\u8ba4\u4e3a\u6d88\u8d39\u8005\u6389\u7ebf heartbeat.interval.ms=3000 \u53d1\u9001\u5fc3\u8df3\u95f4\u9694\u65f6\u95f4\uff0c\u63a8\u8350\u4e0d\u8981\u9ad8\u4e8e session.timeout.ms \u7684 1/3","title":"\u5fc3\u8df3"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/5-consumer-config/#poll","text":"max.poll.interval.ms=300000 poll() \u8c03\u7528\u7684\u6700\u5927\u65f6\u95f4\u95f4\u9694\uff0c\u5982\u679c\u8ddd\u79bb\u4e0a\u4e00\u6b21 poll() \u8c03\u7528\u7684\u65f6\u95f4\u8d85\u8fc7 max.poll.interval.ms \uff0c\u6d88\u8d39\u8005\u4f1a\u88ab\u8ba4\u4e3a\u5931\u8d25 max.poll.records=500 \u5355\u6b21 poll() \u8c03\u7528\u53ef\u4ee5\u62c9\u53d6\u7684\u6700\u591a\u6d88\u606f","title":"poll"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/5-consumer-config/#_3","text":"\u8bfb\u5df2\u63d0\u4ea4\u6d88\u606f\uff0c\u5173\u95ed\u81ea\u52a8\u63d0\u4ea4 offset isolation.level=read_committed enable.auto.commit=false","title":"\u4e8b\u52a1"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/6-other/","text":"\u5176\u4ed6 \u652f\u6301\u7684\u6d88\u606f\u5927\u5c0f producer max.request.size broker message.max.bytes # replica fetcher # \u4e0d\u662f\u7edd\u5bf9\u7684\u6700\u5927\u503c\uff0c\u5982\u679c\u6d88\u606f\u8d85\u8fc7\u8fd9\u4e2a\u8bbe\u5b9a\uff0c\u6700\u5927\u503c\u4ecd\u7531 message.max.bytes, max.message.bytes \u51b3\u5b9a (?) replica.fetch.max.bytes topic max.message.bytes consumer fetch.message.max.bytes","title":"3.6 other"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/6-other/#_1","text":"","title":"\u5176\u4ed6"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/6-other/#_2","text":"","title":"\u652f\u6301\u7684\u6d88\u606f\u5927\u5c0f"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/6-other/#producer","text":"max.request.size","title":"producer"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/6-other/#broker","text":"message.max.bytes # replica fetcher # \u4e0d\u662f\u7edd\u5bf9\u7684\u6700\u5927\u503c\uff0c\u5982\u679c\u6d88\u606f\u8d85\u8fc7\u8fd9\u4e2a\u8bbe\u5b9a\uff0c\u6700\u5927\u503c\u4ecd\u7531 message.max.bytes, max.message.bytes \u51b3\u5b9a (?) replica.fetch.max.bytes","title":"broker"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/6-other/#topic","text":"max.message.bytes","title":"topic"},{"location":"3-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/6-other/#consumer","text":"fetch.message.max.bytes","title":"consumer"}]}